{
  "rules" : [
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "X"
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "S"
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "hasPostfixUnaryBelow" : false,
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "Start(X)",
        "nodeType" : "Start"
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "X"
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "hasPostfixUnaryBelow" : false,
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "Start",
        "name" : "Start(X)",
        "startSymbol" : "X"
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "S"
      },
      "body" : [
        {
          "kind" : "Code",
          "name" : "a:a [a.lExt == 0] {println(a.rExt,indent(a.rExt))} {assert(a.rExt == 1,indent(a.rExt) == 2)}",
          "symbol" : {
            "kind" : "Code",
            "name" : "a:a [a.lExt == 0] {println(a.rExt,indent(a.rExt))}",
            "symbol" : {
              "kind" : "Terminal",
              "name" : "a",
              "label" : "a",
              "postConditions" : [
                {
                  "kind" : "DataDependentCondition",
                  "type" : "DATA_DEPENDENT",
                  "expression" : {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "LeftExtent",
                      "label" : "a"
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 0
                    }
                  }
                }
              ],
              "regex" : {
                "kind" : "Char",
                "val" : 97
              }
            },
            "statements" : [
              {
                "kind" : "ExpressionStatement",
                "exp" : {
                  "kind" : "Println",
                  "arguments" : [
                    {
                      "kind" : "RightExtent",
                      "label" : "a"
                    },
                    {
                      "kind" : "Indent",
                      "fun" : "indent",
                      "arguments" : [
                        {
                          "kind" : "RightExtent",
                          "label" : "a"
                        }
                      ]
                    }
                  ],
                  "fun" : "println"
                }
              }
            ]
          },
          "statements" : [
            {
              "kind" : "ExpressionStatement",
              "exp" : {
                "kind" : "Assert",
                "arguments" : [
                  {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "RightExtent",
                      "label" : "a"
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 1
                    }
                  },
                  {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "Indent",
                      "fun" : "indent",
                      "arguments" : [
                        {
                          "kind" : "RightExtent",
                          "label" : "a"
                        }
                      ]
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 2
                    }
                  }
                ],
                "fun" : "assert"
              }
            }
          ]
        },
        {
          "kind" : "Terminal",
          "name" : "Layout",
          "nodeType" : "Regex",
          "regex" : {
            "kind" : "regex.Star",
            "regex" : {
              "kind" : "regex.Alt",
              "symbols" : [
                {
                  "kind" : "Char",
                  "val" : 32
                }
              ]
            }
          }
        },
        {
          "kind" : "Code",
          "name" : "b:b [b.lExt == 5] {println(b.rExt,indent(b.rExt))} {assert(b.lExt == 5,b.rExt == 6,indent(b.rExt) == 7)}",
          "symbol" : {
            "kind" : "Code",
            "name" : "b:b [b.lExt == 5] {println(b.rExt,indent(b.rExt))}",
            "symbol" : {
              "kind" : "Terminal",
              "name" : "b",
              "label" : "b",
              "postConditions" : [
                {
                  "kind" : "DataDependentCondition",
                  "type" : "DATA_DEPENDENT",
                  "expression" : {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "LeftExtent",
                      "label" : "b"
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 5
                    }
                  }
                }
              ],
              "regex" : {
                "kind" : "Char",
                "val" : 98
              }
            },
            "statements" : [
              {
                "kind" : "ExpressionStatement",
                "exp" : {
                  "kind" : "Println",
                  "arguments" : [
                    {
                      "kind" : "RightExtent",
                      "label" : "b"
                    },
                    {
                      "kind" : "Indent",
                      "fun" : "indent",
                      "arguments" : [
                        {
                          "kind" : "RightExtent",
                          "label" : "b"
                        }
                      ]
                    }
                  ],
                  "fun" : "println"
                }
              }
            ]
          },
          "statements" : [
            {
              "kind" : "ExpressionStatement",
              "exp" : {
                "kind" : "Assert",
                "arguments" : [
                  {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "LeftExtent",
                      "label" : "b"
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 5
                    }
                  },
                  {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "RightExtent",
                      "label" : "b"
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 6
                    }
                  },
                  {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "Indent",
                      "fun" : "indent",
                      "arguments" : [
                        {
                          "kind" : "RightExtent",
                          "label" : "b"
                        }
                      ]
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 7
                    }
                  }
                ],
                "fun" : "assert"
              }
            }
          ]
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "hasPostfixUnaryBelow" : false,
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    }
  ],
  "startSymbol" : {
    "kind" : "Start",
    "name" : "Start(X)",
    "startSymbol" : "X"
  }
}