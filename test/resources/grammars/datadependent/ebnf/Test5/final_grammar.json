{
  "rules" : [
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "S",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "parameters" : [
          "bCounter",
          "cCounter"
        ]
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "X",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "arguments" : [
            {
              "kind" : "Name",
              "name" : "bCounter",
              "i" : -1
            },
            {
              "kind" : "Name",
              "name" : "cCounter",
              "i" : -1
            }
          ]
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "parameters" : [
          "a",
          "bCounter",
          "cCounter"
        ],
        "nodeType" : "Seq"
      },
      "body" : [
        {
          "kind" : "Code",
          "name" : "b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2}",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "symbol" : {
            "kind" : "Nonterminal",
            "name" : "B",
            "label" : "b",
            "preConditions" : [ ],
            "postConditions" : [
              {
                "kind" : "DataDependentCondition",
                "type" : "DATA_DEPENDENT",
                "expression" : {
                  "kind" : "Equal",
                  "lhs" : {
                    "kind" : "LeftExtent",
                    "label" : "b"
                  },
                  "rhs" : {
                    "kind" : "RightExtent",
                    "label" : "a"
                  }
                }
              }
            ]
          },
          "statements" : [
            {
              "kind" : "ExpressionStatement",
              "exp" : {
                "kind" : "Assert",
                "arguments" : [
                  {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "Name",
                      "name" : "bCounter",
                      "i" : -1
                    },
                    "rhs" : {
                      "kind" : "LeftExtent",
                      "label" : "b"
                    }
                  }
                ],
                "fun" : "assert"
              }
            },
            {
              "kind" : "ExpressionStatement",
              "exp" : {
                "kind" : "Assignment",
                "id" : "bCounter",
                "exp" : {
                  "kind" : "Add",
                  "lhs" : {
                    "kind" : "Name",
                    "name" : "bCounter",
                    "i" : -1
                  },
                  "rhs" : {
                    "kind" : "Integer",
                    "value" : 2
                  }
                },
                "i" : -1
              }
            }
          ]
        },
        {
          "kind" : "Code",
          "name" : "c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2}",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "symbol" : {
            "kind" : "Nonterminal",
            "name" : "C",
            "label" : "c",
            "preConditions" : [ ],
            "postConditions" : [ ]
          },
          "statements" : [
            {
              "kind" : "ExpressionStatement",
              "exp" : {
                "kind" : "Assert",
                "arguments" : [
                  {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "Name",
                      "name" : "cCounter",
                      "i" : -1
                    },
                    "rhs" : {
                      "kind" : "LeftExtent",
                      "label" : "c"
                    }
                  }
                ],
                "fun" : "assert"
              }
            },
            {
              "kind" : "ExpressionStatement",
              "exp" : {
                "kind" : "Assignment",
                "id" : "cCounter",
                "exp" : {
                  "kind" : "Add",
                  "lhs" : {
                    "kind" : "Name",
                    "name" : "cCounter",
                    "i" : -1
                  },
                  "rhs" : {
                    "kind" : "Integer",
                    "value" : 2
                  }
                },
                "i" : -1
              }
            }
          ]
        },
        {
          "kind" : "Return",
          "name" : "{(bCounter,cCounter)}",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "expression" : {
            "kind" : "Tuple",
            "elements" : [
              {
                "kind" : "Name",
                "name" : "bCounter",
                "i" : -1
              },
              {
                "kind" : "Name",
                "name" : "cCounter",
                "i" : -1
              }
            ],
            "length" : 2
          }
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "Sequence",
        "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "symbols" : [
          {
            "kind" : "Code",
            "name" : "b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2}",
            "preConditions" : [ ],
            "postConditions" : [ ],
            "symbol" : {
              "kind" : "Nonterminal",
              "name" : "B",
              "label" : "b",
              "preConditions" : [ ],
              "postConditions" : [
                {
                  "kind" : "DataDependentCondition",
                  "type" : "DATA_DEPENDENT",
                  "expression" : {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "LeftExtent",
                      "label" : "b"
                    },
                    "rhs" : {
                      "kind" : "RightExtent",
                      "label" : "a"
                    }
                  }
                }
              ]
            },
            "statements" : [
              {
                "kind" : "ExpressionStatement",
                "exp" : {
                  "kind" : "Assert",
                  "arguments" : [
                    {
                      "kind" : "Equal",
                      "lhs" : {
                        "kind" : "Name",
                        "name" : "bCounter",
                        "i" : -1
                      },
                      "rhs" : {
                        "kind" : "LeftExtent",
                        "label" : "b"
                      }
                    }
                  ],
                  "fun" : "assert"
                }
              },
              {
                "kind" : "ExpressionStatement",
                "exp" : {
                  "kind" : "Assignment",
                  "id" : "bCounter",
                  "exp" : {
                    "kind" : "Add",
                    "lhs" : {
                      "kind" : "Name",
                      "name" : "bCounter",
                      "i" : -1
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 2
                    }
                  },
                  "i" : -1
                }
              }
            ]
          },
          {
            "kind" : "Code",
            "name" : "c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2}",
            "preConditions" : [ ],
            "postConditions" : [ ],
            "symbol" : {
              "kind" : "Nonterminal",
              "name" : "C",
              "label" : "c",
              "preConditions" : [ ],
              "postConditions" : [ ]
            },
            "statements" : [
              {
                "kind" : "ExpressionStatement",
                "exp" : {
                  "kind" : "Assert",
                  "arguments" : [
                    {
                      "kind" : "Equal",
                      "lhs" : {
                        "kind" : "Name",
                        "name" : "cCounter",
                        "i" : -1
                      },
                      "rhs" : {
                        "kind" : "LeftExtent",
                        "label" : "c"
                      }
                    }
                  ],
                  "fun" : "assert"
                }
              },
              {
                "kind" : "ExpressionStatement",
                "exp" : {
                  "kind" : "Assignment",
                  "id" : "cCounter",
                  "exp" : {
                    "kind" : "Add",
                    "lhs" : {
                      "kind" : "Name",
                      "name" : "cCounter",
                      "i" : -1
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 2
                    }
                  },
                  "i" : -1
                }
              }
            ]
          }
        ]
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})+",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "parameters" : [
          "a",
          "bCounter",
          "cCounter"
        ],
        "nodeType" : "Plus"
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})+",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "state" : [
            "bCounter",
            "cCounter"
          ],
          "parameters" : [
            "a",
            "bCounter",
            "cCounter"
          ],
          "arguments" : [
            {
              "kind" : "Name",
              "name" : "a",
              "i" : -1
            },
            {
              "kind" : "Name",
              "name" : "bCounter",
              "i" : -1
            },
            {
              "kind" : "Name",
              "name" : "cCounter",
              "i" : -1
            }
          ],
          "nodeType" : "Plus"
        },
        {
          "kind" : "Nonterminal",
          "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "state" : [
            "bCounter",
            "cCounter"
          ],
          "parameters" : [
            "a",
            "bCounter",
            "cCounter"
          ],
          "arguments" : [
            {
              "kind" : "Name",
              "name" : "a",
              "i" : -1
            },
            {
              "kind" : "Name",
              "name" : "bCounter",
              "i" : -1
            },
            {
              "kind" : "Name",
              "name" : "cCounter",
              "i" : -1
            }
          ],
          "nodeType" : "Seq"
        },
        {
          "kind" : "Return",
          "name" : "{(bCounter,cCounter)}",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "expression" : {
            "kind" : "Tuple",
            "elements" : [
              {
                "kind" : "Name",
                "name" : "bCounter",
                "i" : -1
              },
              {
                "kind" : "Name",
                "name" : "cCounter",
                "i" : -1
              }
            ],
            "length" : 2
          }
        }
      ],
      "recursion" : "LEFT_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : 1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "Plus",
        "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})+",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "s" : {
          "kind" : "Sequence",
          "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "symbols" : [
            {
              "kind" : "Code",
              "name" : "b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2}",
              "preConditions" : [ ],
              "postConditions" : [ ],
              "symbol" : {
                "kind" : "Nonterminal",
                "name" : "B",
                "label" : "b",
                "preConditions" : [ ],
                "postConditions" : [
                  {
                    "kind" : "DataDependentCondition",
                    "type" : "DATA_DEPENDENT",
                    "expression" : {
                      "kind" : "Equal",
                      "lhs" : {
                        "kind" : "LeftExtent",
                        "label" : "b"
                      },
                      "rhs" : {
                        "kind" : "RightExtent",
                        "label" : "a"
                      }
                    }
                  }
                ]
              },
              "statements" : [
                {
                  "kind" : "ExpressionStatement",
                  "exp" : {
                    "kind" : "Assert",
                    "arguments" : [
                      {
                        "kind" : "Equal",
                        "lhs" : {
                          "kind" : "Name",
                          "name" : "bCounter",
                          "i" : -1
                        },
                        "rhs" : {
                          "kind" : "LeftExtent",
                          "label" : "b"
                        }
                      }
                    ],
                    "fun" : "assert"
                  }
                },
                {
                  "kind" : "ExpressionStatement",
                  "exp" : {
                    "kind" : "Assignment",
                    "id" : "bCounter",
                    "exp" : {
                      "kind" : "Add",
                      "lhs" : {
                        "kind" : "Name",
                        "name" : "bCounter",
                        "i" : -1
                      },
                      "rhs" : {
                        "kind" : "Integer",
                        "value" : 2
                      }
                    },
                    "i" : -1
                  }
                }
              ]
            },
            {
              "kind" : "Code",
              "name" : "c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2}",
              "preConditions" : [ ],
              "postConditions" : [ ],
              "symbol" : {
                "kind" : "Nonterminal",
                "name" : "C",
                "label" : "c",
                "preConditions" : [ ],
                "postConditions" : [ ]
              },
              "statements" : [
                {
                  "kind" : "ExpressionStatement",
                  "exp" : {
                    "kind" : "Assert",
                    "arguments" : [
                      {
                        "kind" : "Equal",
                        "lhs" : {
                          "kind" : "Name",
                          "name" : "cCounter",
                          "i" : -1
                        },
                        "rhs" : {
                          "kind" : "LeftExtent",
                          "label" : "c"
                        }
                      }
                    ],
                    "fun" : "assert"
                  }
                },
                {
                  "kind" : "ExpressionStatement",
                  "exp" : {
                    "kind" : "Assignment",
                    "id" : "cCounter",
                    "exp" : {
                      "kind" : "Add",
                      "lhs" : {
                        "kind" : "Name",
                        "name" : "cCounter",
                        "i" : -1
                      },
                      "rhs" : {
                        "kind" : "Integer",
                        "value" : 2
                      }
                    },
                    "i" : -1
                  }
                }
              ]
            }
          ]
        },
        "separators" : [ ]
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})+",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "parameters" : [
          "a",
          "bCounter",
          "cCounter"
        ],
        "nodeType" : "Plus"
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "state" : [
            "bCounter",
            "cCounter"
          ],
          "parameters" : [
            "a",
            "bCounter",
            "cCounter"
          ],
          "arguments" : [
            {
              "kind" : "Name",
              "name" : "a",
              "i" : -1
            },
            {
              "kind" : "Name",
              "name" : "bCounter",
              "i" : -1
            },
            {
              "kind" : "Name",
              "name" : "cCounter",
              "i" : -1
            }
          ],
          "nodeType" : "Seq"
        },
        {
          "kind" : "Return",
          "name" : "{(bCounter,cCounter)}",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "expression" : {
            "kind" : "Tuple",
            "elements" : [
              {
                "kind" : "Name",
                "name" : "bCounter",
                "i" : -1
              },
              {
                "kind" : "Name",
                "name" : "cCounter",
                "i" : -1
              }
            ],
            "length" : 2
          }
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "Plus",
        "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})+",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "s" : {
          "kind" : "Sequence",
          "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "symbols" : [
            {
              "kind" : "Code",
              "name" : "b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2}",
              "preConditions" : [ ],
              "postConditions" : [ ],
              "symbol" : {
                "kind" : "Nonterminal",
                "name" : "B",
                "label" : "b",
                "preConditions" : [ ],
                "postConditions" : [
                  {
                    "kind" : "DataDependentCondition",
                    "type" : "DATA_DEPENDENT",
                    "expression" : {
                      "kind" : "Equal",
                      "lhs" : {
                        "kind" : "LeftExtent",
                        "label" : "b"
                      },
                      "rhs" : {
                        "kind" : "RightExtent",
                        "label" : "a"
                      }
                    }
                  }
                ]
              },
              "statements" : [
                {
                  "kind" : "ExpressionStatement",
                  "exp" : {
                    "kind" : "Assert",
                    "arguments" : [
                      {
                        "kind" : "Equal",
                        "lhs" : {
                          "kind" : "Name",
                          "name" : "bCounter",
                          "i" : -1
                        },
                        "rhs" : {
                          "kind" : "LeftExtent",
                          "label" : "b"
                        }
                      }
                    ],
                    "fun" : "assert"
                  }
                },
                {
                  "kind" : "ExpressionStatement",
                  "exp" : {
                    "kind" : "Assignment",
                    "id" : "bCounter",
                    "exp" : {
                      "kind" : "Add",
                      "lhs" : {
                        "kind" : "Name",
                        "name" : "bCounter",
                        "i" : -1
                      },
                      "rhs" : {
                        "kind" : "Integer",
                        "value" : 2
                      }
                    },
                    "i" : -1
                  }
                }
              ]
            },
            {
              "kind" : "Code",
              "name" : "c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2}",
              "preConditions" : [ ],
              "postConditions" : [ ],
              "symbol" : {
                "kind" : "Nonterminal",
                "name" : "C",
                "label" : "c",
                "preConditions" : [ ],
                "postConditions" : [ ]
              },
              "statements" : [
                {
                  "kind" : "ExpressionStatement",
                  "exp" : {
                    "kind" : "Assert",
                    "arguments" : [
                      {
                        "kind" : "Equal",
                        "lhs" : {
                          "kind" : "Name",
                          "name" : "cCounter",
                          "i" : -1
                        },
                        "rhs" : {
                          "kind" : "LeftExtent",
                          "label" : "c"
                        }
                      }
                    ],
                    "fun" : "assert"
                  }
                },
                {
                  "kind" : "ExpressionStatement",
                  "exp" : {
                    "kind" : "Assignment",
                    "id" : "cCounter",
                    "exp" : {
                      "kind" : "Add",
                      "lhs" : {
                        "kind" : "Name",
                        "name" : "cCounter",
                        "i" : -1
                      },
                      "rhs" : {
                        "kind" : "Integer",
                        "value" : 2
                      }
                    },
                    "i" : -1
                  }
                }
              ]
            }
          ]
        },
        "separators" : [ ]
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})*",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "parameters" : [
          "a",
          "bCounter",
          "cCounter"
        ],
        "nodeType" : "Star"
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})+",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "state" : [
            "_"
          ],
          "parameters" : [
            "a",
            "bCounter",
            "cCounter"
          ],
          "arguments" : [
            {
              "kind" : "Name",
              "name" : "a",
              "i" : -1
            },
            {
              "kind" : "Name",
              "name" : "bCounter",
              "i" : -1
            },
            {
              "kind" : "Name",
              "name" : "cCounter",
              "i" : -1
            }
          ],
          "nodeType" : "Plus"
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "Star",
        "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})*",
        "label" : "b",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "s" : {
          "kind" : "Sequence",
          "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "symbols" : [
            {
              "kind" : "Code",
              "name" : "b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2}",
              "preConditions" : [ ],
              "postConditions" : [ ],
              "symbol" : {
                "kind" : "Nonterminal",
                "name" : "B",
                "label" : "b",
                "preConditions" : [ ],
                "postConditions" : [
                  {
                    "kind" : "DataDependentCondition",
                    "type" : "DATA_DEPENDENT",
                    "expression" : {
                      "kind" : "Equal",
                      "lhs" : {
                        "kind" : "LeftExtent",
                        "label" : "b"
                      },
                      "rhs" : {
                        "kind" : "RightExtent",
                        "label" : "a"
                      }
                    }
                  }
                ]
              },
              "statements" : [
                {
                  "kind" : "ExpressionStatement",
                  "exp" : {
                    "kind" : "Assert",
                    "arguments" : [
                      {
                        "kind" : "Equal",
                        "lhs" : {
                          "kind" : "Name",
                          "name" : "bCounter",
                          "i" : -1
                        },
                        "rhs" : {
                          "kind" : "LeftExtent",
                          "label" : "b"
                        }
                      }
                    ],
                    "fun" : "assert"
                  }
                },
                {
                  "kind" : "ExpressionStatement",
                  "exp" : {
                    "kind" : "Assignment",
                    "id" : "bCounter",
                    "exp" : {
                      "kind" : "Add",
                      "lhs" : {
                        "kind" : "Name",
                        "name" : "bCounter",
                        "i" : -1
                      },
                      "rhs" : {
                        "kind" : "Integer",
                        "value" : 2
                      }
                    },
                    "i" : -1
                  }
                }
              ]
            },
            {
              "kind" : "Code",
              "name" : "c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2}",
              "preConditions" : [ ],
              "postConditions" : [ ],
              "symbol" : {
                "kind" : "Nonterminal",
                "name" : "C",
                "label" : "c",
                "preConditions" : [ ],
                "postConditions" : [ ]
              },
              "statements" : [
                {
                  "kind" : "ExpressionStatement",
                  "exp" : {
                    "kind" : "Assert",
                    "arguments" : [
                      {
                        "kind" : "Equal",
                        "lhs" : {
                          "kind" : "Name",
                          "name" : "cCounter",
                          "i" : -1
                        },
                        "rhs" : {
                          "kind" : "LeftExtent",
                          "label" : "c"
                        }
                      }
                    ],
                    "fun" : "assert"
                  }
                },
                {
                  "kind" : "ExpressionStatement",
                  "exp" : {
                    "kind" : "Assignment",
                    "id" : "cCounter",
                    "exp" : {
                      "kind" : "Add",
                      "lhs" : {
                        "kind" : "Name",
                        "name" : "cCounter",
                        "i" : -1
                      },
                      "rhs" : {
                        "kind" : "Integer",
                        "value" : 2
                      }
                    },
                    "i" : -1
                  }
                }
              ]
            }
          ]
        },
        "separators" : [ ]
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})*",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "parameters" : [
          "a",
          "bCounter",
          "cCounter"
        ],
        "nodeType" : "Star"
      },
      "body" : [ ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "Star",
        "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})*",
        "label" : "b",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "s" : {
          "kind" : "Sequence",
          "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "symbols" : [
            {
              "kind" : "Code",
              "name" : "b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2}",
              "preConditions" : [ ],
              "postConditions" : [ ],
              "symbol" : {
                "kind" : "Nonterminal",
                "name" : "B",
                "label" : "b",
                "preConditions" : [ ],
                "postConditions" : [
                  {
                    "kind" : "DataDependentCondition",
                    "type" : "DATA_DEPENDENT",
                    "expression" : {
                      "kind" : "Equal",
                      "lhs" : {
                        "kind" : "LeftExtent",
                        "label" : "b"
                      },
                      "rhs" : {
                        "kind" : "RightExtent",
                        "label" : "a"
                      }
                    }
                  }
                ]
              },
              "statements" : [
                {
                  "kind" : "ExpressionStatement",
                  "exp" : {
                    "kind" : "Assert",
                    "arguments" : [
                      {
                        "kind" : "Equal",
                        "lhs" : {
                          "kind" : "Name",
                          "name" : "bCounter",
                          "i" : -1
                        },
                        "rhs" : {
                          "kind" : "LeftExtent",
                          "label" : "b"
                        }
                      }
                    ],
                    "fun" : "assert"
                  }
                },
                {
                  "kind" : "ExpressionStatement",
                  "exp" : {
                    "kind" : "Assignment",
                    "id" : "bCounter",
                    "exp" : {
                      "kind" : "Add",
                      "lhs" : {
                        "kind" : "Name",
                        "name" : "bCounter",
                        "i" : -1
                      },
                      "rhs" : {
                        "kind" : "Integer",
                        "value" : 2
                      }
                    },
                    "i" : -1
                  }
                }
              ]
            },
            {
              "kind" : "Code",
              "name" : "c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2}",
              "preConditions" : [ ],
              "postConditions" : [ ],
              "symbol" : {
                "kind" : "Nonterminal",
                "name" : "C",
                "label" : "c",
                "preConditions" : [ ],
                "postConditions" : [ ]
              },
              "statements" : [
                {
                  "kind" : "ExpressionStatement",
                  "exp" : {
                    "kind" : "Assert",
                    "arguments" : [
                      {
                        "kind" : "Equal",
                        "lhs" : {
                          "kind" : "Name",
                          "name" : "cCounter",
                          "i" : -1
                        },
                        "rhs" : {
                          "kind" : "LeftExtent",
                          "label" : "c"
                        }
                      }
                    ],
                    "fun" : "assert"
                  }
                },
                {
                  "kind" : "ExpressionStatement",
                  "exp" : {
                    "kind" : "Assignment",
                    "id" : "cCounter",
                    "exp" : {
                      "kind" : "Add",
                      "lhs" : {
                        "kind" : "Name",
                        "name" : "cCounter",
                        "i" : -1
                      },
                      "rhs" : {
                        "kind" : "Integer",
                        "value" : 2
                      }
                    },
                    "i" : -1
                  }
                }
              ]
            }
          ]
        },
        "separators" : [ ]
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "X",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "parameters" : [
          "bCounter",
          "cCounter"
        ]
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "A",
          "label" : "a",
          "preConditions" : [ ],
          "postConditions" : [ ]
        },
        {
          "kind" : "Nonterminal",
          "name" : "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})*",
          "label" : "b",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "parameters" : [
            "a",
            "bCounter",
            "cCounter"
          ],
          "arguments" : [
            {
              "kind" : "Name",
              "name" : "a",
              "i" : -1
            },
            {
              "kind" : "Name",
              "name" : "bCounter",
              "i" : -1
            },
            {
              "kind" : "Name",
              "name" : "cCounter",
              "i" : -1
            }
          ],
          "nodeType" : "Star"
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "A",
        "preConditions" : [ ],
        "postConditions" : [ ]
      },
      "body" : [
        {
          "kind" : "Terminal",
          "name" : "'a'",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "nodeType" : "Literal",
          "regex" : {
            "kind" : "Char",
            "lookaheads" : [ ],
            "lookbehinds" : [ ],
            "val" : 97
          }
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "B",
        "preConditions" : [ ],
        "postConditions" : [ ]
      },
      "body" : [
        {
          "kind" : "Terminal",
          "name" : "'b'",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "nodeType" : "Literal",
          "regex" : {
            "kind" : "Char",
            "lookaheads" : [ ],
            "lookbehinds" : [ ],
            "val" : 98
          }
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "C",
        "preConditions" : [ ],
        "postConditions" : [ ]
      },
      "body" : [
        {
          "kind" : "Terminal",
          "name" : "'c'",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "nodeType" : "Literal",
          "regex" : {
            "kind" : "Char",
            "lookaheads" : [ ],
            "lookbehinds" : [ ],
            "val" : 99
          }
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "Start(S)",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "parameters" : [
          "bCounter",
          "cCounter"
        ],
        "nodeType" : "Start"
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "S",
          "label" : "top",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "arguments" : [
            {
              "kind" : "Name",
              "name" : "bCounter",
              "i" : -1
            },
            {
              "kind" : "Name",
              "name" : "cCounter",
              "i" : -1
            }
          ]
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "Start",
        "name" : "Start(S)",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "startSymbol" : "S"
      }
    }
  ],
  "regularExpressionDefinitions" : { },
  "ebnfLefts" : {
    "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})" : [
      "C"
    ],
    "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})+" : [
      "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})"
    ],
    "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})*" : [
      "(b:B[b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})+"
    ]
  },
  "ebnfRights" : {
    "(b:B [b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})" : [
      "C",
      "$C"
    ],
    "(b:B [b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})+" : [
      "(b:B [b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})",
      "C",
      "$C"
    ],
    "(b:B [b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})*" : [
      "(b:B [b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})+",
      "(b:B [b.lExt == a.rExt] {assert(bCounter == b.lExt);bCounter = bCounter + 2} c:C {assert(cCounter == c.lExt);cCounter = cCounter + 2})",
      "C",
      "$C"
    ]
  },
  "startSymbols" : [
    {
      "kind" : "Start",
      "name" : "Start(S)",
      "preConditions" : [ ],
      "postConditions" : [ ],
      "startSymbol" : "S"
    },
    {
      "kind" : "Start",
      "name" : "Start(S)",
      "preConditions" : [ ],
      "postConditions" : [ ],
      "startSymbol" : "S"
    }
  ],
  "globals" : {
    "bCounter" : {
      "kind" : "Integer",
      "value" : 1
    },
    "cCounter" : {
      "kind" : "Integer",
      "value" : 2
    }
  }
}