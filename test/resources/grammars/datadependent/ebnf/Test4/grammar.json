{
  "rules" : [
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "S"
      },
      "priorityLevels" : [
        {
          "alternatives" : [
            {
              "seqs" : [
                {
                  "symbols" : [
                    {
                      "kind" : "Identifier",
                      "name" : "X"
                    }
                  ],
                  "associativity" : "UNDEFINED"
                }
              ],
              "associativity" : "UNDEFINED"
            }
          ]
        }
      ],
      "layoutStrategy" : "INHERITED"
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "X"
      },
      "priorityLevels" : [
        {
          "alternatives" : [
            {
              "seqs" : [
                {
                  "symbols" : [
                    {
                      "kind" : "Identifier",
                      "name" : "A",
                      "label" : "a"
                    },
                    {
                      "kind" : "Star",
                      "name" : "(B [a.rExt == b.lExt] {assert(b.lExt == 1)} b:C {assert(b.lExt == 2 || b.lExt == 4 || b.lExt == 6)})*",
                      "label" : "b",
                      "s" : {
                        "kind" : "Sequence",
                        "name" : "(B [a.rExt == b.lExt] {assert(b.lExt == 1)} b:C {assert(b.lExt == 2 || b.lExt == 4 || b.lExt == 6)})",
                        "symbols" : [
                          {
                            "kind" : "Code",
                            "name" : "B [a.rExt == b.lExt] {assert(b.lExt == 1)}",
                            "symbol" : {
                              "kind" : "Identifier",
                              "name" : "B",
                              "postConditions" : [
                                {
                                  "kind" : "DataDependentCondition",
                                  "type" : "DATA_DEPENDENT",
                                  "expression" : {
                                    "kind" : "Equal",
                                    "lhs" : {
                                      "kind" : "RightExtent",
                                      "label" : "a"
                                    },
                                    "rhs" : {
                                      "kind" : "LeftExtent",
                                      "label" : "b"
                                    }
                                  }
                                }
                              ]
                            },
                            "statements" : [
                              {
                                "kind" : "ExpressionStatement",
                                "exp" : {
                                  "kind" : "Assert",
                                  "arguments" : [
                                    {
                                      "kind" : "Equal",
                                      "lhs" : {
                                        "kind" : "LeftExtent",
                                        "label" : "b"
                                      },
                                      "rhs" : {
                                        "kind" : "Integer",
                                        "value" : 1
                                      }
                                    }
                                  ],
                                  "fun" : "assert"
                                }
                              }
                            ]
                          },
                          {
                            "kind" : "Code",
                            "name" : "b:C {assert(b.lExt == 2 || b.lExt == 4 || b.lExt == 6)}",
                            "symbol" : {
                              "kind" : "Identifier",
                              "name" : "C",
                              "label" : "b"
                            },
                            "statements" : [
                              {
                                "kind" : "ExpressionStatement",
                                "exp" : {
                                  "kind" : "Assert",
                                  "arguments" : [
                                    {
                                      "kind" : "Or",
                                      "lhs" : {
                                        "kind" : "Or",
                                        "lhs" : {
                                          "kind" : "Equal",
                                          "lhs" : {
                                            "kind" : "LeftExtent",
                                            "label" : "b"
                                          },
                                          "rhs" : {
                                            "kind" : "Integer",
                                            "value" : 2
                                          }
                                        },
                                        "rhs" : {
                                          "kind" : "Equal",
                                          "lhs" : {
                                            "kind" : "LeftExtent",
                                            "label" : "b"
                                          },
                                          "rhs" : {
                                            "kind" : "Integer",
                                            "value" : 4
                                          }
                                        }
                                      },
                                      "rhs" : {
                                        "kind" : "Equal",
                                        "lhs" : {
                                          "kind" : "LeftExtent",
                                          "label" : "b"
                                        },
                                        "rhs" : {
                                          "kind" : "Integer",
                                          "value" : 6
                                        }
                                      }
                                    }
                                  ],
                                  "fun" : "assert"
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ],
                  "associativity" : "UNDEFINED"
                }
              ],
              "associativity" : "UNDEFINED"
            }
          ]
        }
      ],
      "layoutStrategy" : "INHERITED"
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "A"
      },
      "priorityLevels" : [
        {
          "alternatives" : [
            {
              "seqs" : [
                {
                  "symbols" : [
                    {
                      "kind" : "Terminal",
                      "name" : "'a'",
                      "nodeType" : "Literal",
                      "regex" : {
                        "kind" : "Char",
                        "val" : 97
                      }
                    }
                  ],
                  "associativity" : "UNDEFINED"
                }
              ],
              "associativity" : "UNDEFINED"
            }
          ]
        }
      ],
      "layoutStrategy" : "INHERITED"
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "B"
      },
      "priorityLevels" : [
        {
          "alternatives" : [
            {
              "seqs" : [
                {
                  "symbols" : [
                    {
                      "kind" : "Terminal",
                      "name" : "'b'",
                      "nodeType" : "Literal",
                      "regex" : {
                        "kind" : "Char",
                        "val" : 98
                      }
                    }
                  ],
                  "associativity" : "UNDEFINED"
                }
              ],
              "associativity" : "UNDEFINED"
            }
          ]
        }
      ],
      "layoutStrategy" : "INHERITED"
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "C"
      },
      "priorityLevels" : [
        {
          "alternatives" : [
            {
              "seqs" : [
                {
                  "symbols" : [
                    {
                      "kind" : "Terminal",
                      "name" : "'c'",
                      "nodeType" : "Literal",
                      "regex" : {
                        "kind" : "Char",
                        "val" : 99
                      }
                    }
                  ],
                  "associativity" : "UNDEFINED"
                }
              ],
              "associativity" : "UNDEFINED"
            }
          ]
        }
      ],
      "layoutStrategy" : "INHERITED"
    }
  ],
  "literals" : {
    "a" : {
      "kind" : "Char",
      "val" : 97
    },
    "b" : {
      "kind" : "Char",
      "val" : 98
    },
    "c" : {
      "kind" : "Char",
      "val" : 99
    }
  },
  "startSymbol" : {
    "kind" : "Start",
    "name" : "Start(S)",
    "startSymbol" : "S"
  }
}