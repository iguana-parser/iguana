{
  "kind" : "StartNode",
  "symbol" : {
    "kind" : "Start",
    "name" : "Start(S)",
    "preConditions" : [ ],
    "postConditions" : [ ],
    "startSymbol" : "S"
  },
  "children" : [
    {
      "kind" : "NonterminalNode",
      "rule" : {
        "head" : {
          "kind" : "Nonterminal",
          "name" : "S",
          "preConditions" : [ ],
          "postConditions" : [ ]
        },
        "body" : [
          {
            "kind" : "Nonterminal",
            "name" : "X",
            "preConditions" : [ ],
            "postConditions" : [ ]
          }
        ],
        "recursion" : "NON_REC",
        "irecursion" : "NON_REC",
        "leftEnd" : "",
        "rightEnd" : "",
        "leftEnds" : [ ],
        "rightEnds" : [ ],
        "associativity" : "UNDEFINED",
        "precedence" : -1,
        "precedenceLevel" : {
          "lhs" : 1,
          "rhs" : 1,
          "undefined" : -1,
          "hasPrefixUnary" : false,
          "hasPostfixUnary" : false,
          "hasPrefixUnaryBelow" : false,
          "prefixUnaryBelow" : [ ],
          "hasPostfixUnaryBelow" : false,
          "postfixUnaryBelow" : [ ],
          "index" : 1,
          "containsAssociativityGroup" : false,
          "assoc_lhs" : -1,
          "assoc_rhs" : -1
        }
      },
      "children" : [
        {
          "kind" : "NonterminalNode",
          "rule" : {
            "head" : {
              "kind" : "Nonterminal",
              "name" : "X",
              "preConditions" : [ ],
              "postConditions" : [ ]
            },
            "body" : [
              {
                "kind" : "Nonterminal",
                "name" : "A",
                "label" : "a",
                "preConditions" : [ ],
                "postConditions" : [ ]
              },
              {
                "kind" : "Nonterminal",
                "name" : "(B[a.rExt == b.lExt] {assert(b.lExt == 1)} b:C {assert(b.lExt == 2 || b.lExt == 4 || b.lExt == 6)})*",
                "label" : "b",
                "preConditions" : [ ],
                "postConditions" : [ ],
                "parameters" : [
                  "a",
                  "b.lExt"
                ],
                "arguments" : [
                  {
                    "kind" : "Name",
                    "name" : "a",
                    "i" : -1
                  },
                  {
                    "kind" : "Name",
                    "name" : "b.lExt",
                    "i" : -1
                  }
                ],
                "nodeType" : "Star"
              }
            ],
            "recursion" : "NON_REC",
            "irecursion" : "NON_REC",
            "leftEnd" : "",
            "rightEnd" : "",
            "leftEnds" : [ ],
            "rightEnds" : [ ],
            "associativity" : "UNDEFINED",
            "precedence" : -1,
            "precedenceLevel" : {
              "lhs" : 1,
              "rhs" : 1,
              "undefined" : -1,
              "hasPrefixUnary" : false,
              "hasPostfixUnary" : false,
              "hasPrefixUnaryBelow" : false,
              "prefixUnaryBelow" : [ ],
              "hasPostfixUnaryBelow" : false,
              "postfixUnaryBelow" : [ ],
              "index" : 1,
              "containsAssociativityGroup" : false,
              "assoc_lhs" : -1,
              "assoc_rhs" : -1
            }
          },
          "children" : [
            {
              "kind" : "NonterminalNode",
              "rule" : {
                "head" : {
                  "kind" : "Nonterminal",
                  "name" : "A",
                  "preConditions" : [ ],
                  "postConditions" : [ ]
                },
                "body" : [
                  {
                    "kind" : "Terminal",
                    "name" : "'a'",
                    "preConditions" : [ ],
                    "postConditions" : [ ],
                    "nodeType" : "Literal",
                    "regex" : {
                      "kind" : "Char",
                      "lookaheads" : [ ],
                      "lookbehinds" : [ ],
                      "val" : 97
                    }
                  }
                ],
                "recursion" : "NON_REC",
                "irecursion" : "NON_REC",
                "leftEnd" : "",
                "rightEnd" : "",
                "leftEnds" : [ ],
                "rightEnds" : [ ],
                "associativity" : "UNDEFINED",
                "precedence" : -1,
                "precedenceLevel" : {
                  "lhs" : 1,
                  "rhs" : 1,
                  "undefined" : -1,
                  "hasPrefixUnary" : false,
                  "hasPostfixUnary" : false,
                  "hasPrefixUnaryBelow" : false,
                  "prefixUnaryBelow" : [ ],
                  "hasPostfixUnaryBelow" : false,
                  "postfixUnaryBelow" : [ ],
                  "index" : 1,
                  "containsAssociativityGroup" : false,
                  "assoc_lhs" : -1,
                  "assoc_rhs" : -1
                }
              },
              "children" : [
                {
                  "kind" : "KeywordTerminalNode",
                  "terminal" : {
                    "kind" : "Terminal",
                    "name" : "'a'",
                    "preConditions" : [ ],
                    "postConditions" : [ ],
                    "nodeType" : "Literal",
                    "regex" : {
                      "kind" : "Char",
                      "lookaheads" : [ ],
                      "lookbehinds" : [ ],
                      "val" : 97
                    }
                  },
                  "start" : 0,
                  "end" : 1
                }
              ],
              "start" : 0,
              "end" : 1
            },
            {
              "kind" : "StarNode",
              "symbol" : {
                "kind" : "Star",
                "name" : "(B[a.rExt == b.lExt] {assert(b.lExt == 1)} b:C {assert(b.lExt == 2 || b.lExt == 4 || b.lExt == 6)})*",
                "label" : "b",
                "preConditions" : [ ],
                "postConditions" : [ ],
                "s" : {
                  "kind" : "Sequence",
                  "name" : "(B[a.rExt == b.lExt] {assert(b.lExt == 1)} b:C {assert(b.lExt == 2 || b.lExt == 4 || b.lExt == 6)})",
                  "preConditions" : [ ],
                  "postConditions" : [ ],
                  "symbols" : [
                    {
                      "kind" : "Code",
                      "name" : "B[a.rExt == b.lExt] {assert(b.lExt == 1)}",
                      "preConditions" : [ ],
                      "postConditions" : [ ],
                      "symbol" : {
                        "kind" : "Nonterminal",
                        "name" : "B",
                        "preConditions" : [ ],
                        "postConditions" : [
                          {
                            "kind" : "DataDependentCondition",
                            "type" : "DATA_DEPENDENT",
                            "expression" : {
                              "kind" : "Equal",
                              "lhs" : {
                                "kind" : "RightExtent",
                                "label" : "a"
                              },
                              "rhs" : {
                                "kind" : "LeftExtent",
                                "label" : "b"
                              }
                            }
                          }
                        ]
                      },
                      "statements" : [
                        {
                          "kind" : "ExpressionStatement",
                          "exp" : {
                            "kind" : "Assert",
                            "arguments" : [
                              {
                                "kind" : "Equal",
                                "lhs" : {
                                  "kind" : "LeftExtent",
                                  "label" : "b"
                                },
                                "rhs" : {
                                  "kind" : "Integer",
                                  "value" : 1
                                }
                              }
                            ],
                            "fun" : "assert"
                          }
                        }
                      ]
                    },
                    {
                      "kind" : "Code",
                      "name" : "b:C {assert(b.lExt == 2 || b.lExt == 4 || b.lExt == 6)}",
                      "preConditions" : [ ],
                      "postConditions" : [ ],
                      "symbol" : {
                        "kind" : "Nonterminal",
                        "name" : "C",
                        "label" : "b",
                        "preConditions" : [ ],
                        "postConditions" : [ ]
                      },
                      "statements" : [
                        {
                          "kind" : "ExpressionStatement",
                          "exp" : {
                            "kind" : "Assert",
                            "arguments" : [
                              {
                                "kind" : "Or",
                                "lhs" : {
                                  "kind" : "Or",
                                  "lhs" : {
                                    "kind" : "Equal",
                                    "lhs" : {
                                      "kind" : "LeftExtent",
                                      "label" : "b"
                                    },
                                    "rhs" : {
                                      "kind" : "Integer",
                                      "value" : 2
                                    }
                                  },
                                  "rhs" : {
                                    "kind" : "Equal",
                                    "lhs" : {
                                      "kind" : "LeftExtent",
                                      "label" : "b"
                                    },
                                    "rhs" : {
                                      "kind" : "Integer",
                                      "value" : 4
                                    }
                                  }
                                },
                                "rhs" : {
                                  "kind" : "Equal",
                                  "lhs" : {
                                    "kind" : "LeftExtent",
                                    "label" : "b"
                                  },
                                  "rhs" : {
                                    "kind" : "Integer",
                                    "value" : 6
                                  }
                                }
                              }
                            ],
                            "fun" : "assert"
                          }
                        }
                      ]
                    }
                  ]
                },
                "separators" : [ ]
              },
              "children" : [
                {
                  "kind" : "GroupNode",
                  "symbol" : {
                    "kind" : "Sequence",
                    "name" : "(B[a.rExt == b.lExt] {assert(b.lExt == 1)} b:C {assert(b.lExt == 2 || b.lExt == 4 || b.lExt == 6)})",
                    "preConditions" : [ ],
                    "postConditions" : [ ],
                    "symbols" : [
                      {
                        "kind" : "Code",
                        "name" : "B[a.rExt == b.lExt] {assert(b.lExt == 1)}",
                        "preConditions" : [ ],
                        "postConditions" : [ ],
                        "symbol" : {
                          "kind" : "Nonterminal",
                          "name" : "B",
                          "preConditions" : [ ],
                          "postConditions" : [
                            {
                              "kind" : "DataDependentCondition",
                              "type" : "DATA_DEPENDENT",
                              "expression" : {
                                "kind" : "Equal",
                                "lhs" : {
                                  "kind" : "RightExtent",
                                  "label" : "a"
                                },
                                "rhs" : {
                                  "kind" : "LeftExtent",
                                  "label" : "b"
                                }
                              }
                            }
                          ]
                        },
                        "statements" : [
                          {
                            "kind" : "ExpressionStatement",
                            "exp" : {
                              "kind" : "Assert",
                              "arguments" : [
                                {
                                  "kind" : "Equal",
                                  "lhs" : {
                                    "kind" : "LeftExtent",
                                    "label" : "b"
                                  },
                                  "rhs" : {
                                    "kind" : "Integer",
                                    "value" : 1
                                  }
                                }
                              ],
                              "fun" : "assert"
                            }
                          }
                        ]
                      },
                      {
                        "kind" : "Code",
                        "name" : "b:C {assert(b.lExt == 2 || b.lExt == 4 || b.lExt == 6)}",
                        "preConditions" : [ ],
                        "postConditions" : [ ],
                        "symbol" : {
                          "kind" : "Nonterminal",
                          "name" : "C",
                          "label" : "b",
                          "preConditions" : [ ],
                          "postConditions" : [ ]
                        },
                        "statements" : [
                          {
                            "kind" : "ExpressionStatement",
                            "exp" : {
                              "kind" : "Assert",
                              "arguments" : [
                                {
                                  "kind" : "Or",
                                  "lhs" : {
                                    "kind" : "Or",
                                    "lhs" : {
                                      "kind" : "Equal",
                                      "lhs" : {
                                        "kind" : "LeftExtent",
                                        "label" : "b"
                                      },
                                      "rhs" : {
                                        "kind" : "Integer",
                                        "value" : 2
                                      }
                                    },
                                    "rhs" : {
                                      "kind" : "Equal",
                                      "lhs" : {
                                        "kind" : "LeftExtent",
                                        "label" : "b"
                                      },
                                      "rhs" : {
                                        "kind" : "Integer",
                                        "value" : 4
                                      }
                                    }
                                  },
                                  "rhs" : {
                                    "kind" : "Equal",
                                    "lhs" : {
                                      "kind" : "LeftExtent",
                                      "label" : "b"
                                    },
                                    "rhs" : {
                                      "kind" : "Integer",
                                      "value" : 6
                                    }
                                  }
                                }
                              ],
                              "fun" : "assert"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  "children" : [
                    {
                      "kind" : "NonterminalNode",
                      "rule" : {
                        "head" : {
                          "kind" : "Nonterminal",
                          "name" : "B",
                          "preConditions" : [ ],
                          "postConditions" : [ ]
                        },
                        "body" : [
                          {
                            "kind" : "Terminal",
                            "name" : "'b'",
                            "preConditions" : [ ],
                            "postConditions" : [ ],
                            "nodeType" : "Literal",
                            "regex" : {
                              "kind" : "Char",
                              "lookaheads" : [ ],
                              "lookbehinds" : [ ],
                              "val" : 98
                            }
                          }
                        ],
                        "recursion" : "NON_REC",
                        "irecursion" : "NON_REC",
                        "leftEnd" : "",
                        "rightEnd" : "",
                        "leftEnds" : [ ],
                        "rightEnds" : [ ],
                        "associativity" : "UNDEFINED",
                        "precedence" : -1,
                        "precedenceLevel" : {
                          "lhs" : 1,
                          "rhs" : 1,
                          "undefined" : -1,
                          "hasPrefixUnary" : false,
                          "hasPostfixUnary" : false,
                          "hasPrefixUnaryBelow" : false,
                          "prefixUnaryBelow" : [ ],
                          "hasPostfixUnaryBelow" : false,
                          "postfixUnaryBelow" : [ ],
                          "index" : 1,
                          "containsAssociativityGroup" : false,
                          "assoc_lhs" : -1,
                          "assoc_rhs" : -1
                        }
                      },
                      "children" : [
                        {
                          "kind" : "KeywordTerminalNode",
                          "terminal" : {
                            "kind" : "Terminal",
                            "name" : "'b'",
                            "preConditions" : [ ],
                            "postConditions" : [ ],
                            "nodeType" : "Literal",
                            "regex" : {
                              "kind" : "Char",
                              "lookaheads" : [ ],
                              "lookbehinds" : [ ],
                              "val" : 98
                            }
                          },
                          "start" : 1,
                          "end" : 2
                        }
                      ],
                      "start" : 1,
                      "end" : 2
                    },
                    {
                      "kind" : "NonterminalNode",
                      "rule" : {
                        "head" : {
                          "kind" : "Nonterminal",
                          "name" : "C",
                          "preConditions" : [ ],
                          "postConditions" : [ ]
                        },
                        "body" : [
                          {
                            "kind" : "Terminal",
                            "name" : "'c'",
                            "preConditions" : [ ],
                            "postConditions" : [ ],
                            "nodeType" : "Literal",
                            "regex" : {
                              "kind" : "Char",
                              "lookaheads" : [ ],
                              "lookbehinds" : [ ],
                              "val" : 99
                            }
                          }
                        ],
                        "recursion" : "NON_REC",
                        "irecursion" : "NON_REC",
                        "leftEnd" : "",
                        "rightEnd" : "",
                        "leftEnds" : [ ],
                        "rightEnds" : [ ],
                        "associativity" : "UNDEFINED",
                        "precedence" : -1,
                        "precedenceLevel" : {
                          "lhs" : 1,
                          "rhs" : 1,
                          "undefined" : -1,
                          "hasPrefixUnary" : false,
                          "hasPostfixUnary" : false,
                          "hasPrefixUnaryBelow" : false,
                          "prefixUnaryBelow" : [ ],
                          "hasPostfixUnaryBelow" : false,
                          "postfixUnaryBelow" : [ ],
                          "index" : 1,
                          "containsAssociativityGroup" : false,
                          "assoc_lhs" : -1,
                          "assoc_rhs" : -1
                        }
                      },
                      "children" : [
                        {
                          "kind" : "KeywordTerminalNode",
                          "terminal" : {
                            "kind" : "Terminal",
                            "name" : "'c'",
                            "preConditions" : [ ],
                            "postConditions" : [ ],
                            "nodeType" : "Literal",
                            "regex" : {
                              "kind" : "Char",
                              "lookaheads" : [ ],
                              "lookbehinds" : [ ],
                              "val" : 99
                            }
                          },
                          "start" : 2,
                          "end" : 3
                        }
                      ],
                      "start" : 2,
                      "end" : 3
                    }
                  ],
                  "start" : 1,
                  "end" : 3
                },
                {
                  "kind" : "GroupNode",
                  "symbol" : {
                    "kind" : "Sequence",
                    "name" : "(B[a.rExt == b.lExt] {assert(b.lExt == 1)} b:C {assert(b.lExt == 2 || b.lExt == 4 || b.lExt == 6)})",
                    "preConditions" : [ ],
                    "postConditions" : [ ],
                    "symbols" : [
                      {
                        "kind" : "Code",
                        "name" : "B[a.rExt == b.lExt] {assert(b.lExt == 1)}",
                        "preConditions" : [ ],
                        "postConditions" : [ ],
                        "symbol" : {
                          "kind" : "Nonterminal",
                          "name" : "B",
                          "preConditions" : [ ],
                          "postConditions" : [
                            {
                              "kind" : "DataDependentCondition",
                              "type" : "DATA_DEPENDENT",
                              "expression" : {
                                "kind" : "Equal",
                                "lhs" : {
                                  "kind" : "RightExtent",
                                  "label" : "a"
                                },
                                "rhs" : {
                                  "kind" : "LeftExtent",
                                  "label" : "b"
                                }
                              }
                            }
                          ]
                        },
                        "statements" : [
                          {
                            "kind" : "ExpressionStatement",
                            "exp" : {
                              "kind" : "Assert",
                              "arguments" : [
                                {
                                  "kind" : "Equal",
                                  "lhs" : {
                                    "kind" : "LeftExtent",
                                    "label" : "b"
                                  },
                                  "rhs" : {
                                    "kind" : "Integer",
                                    "value" : 1
                                  }
                                }
                              ],
                              "fun" : "assert"
                            }
                          }
                        ]
                      },
                      {
                        "kind" : "Code",
                        "name" : "b:C {assert(b.lExt == 2 || b.lExt == 4 || b.lExt == 6)}",
                        "preConditions" : [ ],
                        "postConditions" : [ ],
                        "symbol" : {
                          "kind" : "Nonterminal",
                          "name" : "C",
                          "label" : "b",
                          "preConditions" : [ ],
                          "postConditions" : [ ]
                        },
                        "statements" : [
                          {
                            "kind" : "ExpressionStatement",
                            "exp" : {
                              "kind" : "Assert",
                              "arguments" : [
                                {
                                  "kind" : "Or",
                                  "lhs" : {
                                    "kind" : "Or",
                                    "lhs" : {
                                      "kind" : "Equal",
                                      "lhs" : {
                                        "kind" : "LeftExtent",
                                        "label" : "b"
                                      },
                                      "rhs" : {
                                        "kind" : "Integer",
                                        "value" : 2
                                      }
                                    },
                                    "rhs" : {
                                      "kind" : "Equal",
                                      "lhs" : {
                                        "kind" : "LeftExtent",
                                        "label" : "b"
                                      },
                                      "rhs" : {
                                        "kind" : "Integer",
                                        "value" : 4
                                      }
                                    }
                                  },
                                  "rhs" : {
                                    "kind" : "Equal",
                                    "lhs" : {
                                      "kind" : "LeftExtent",
                                      "label" : "b"
                                    },
                                    "rhs" : {
                                      "kind" : "Integer",
                                      "value" : 6
                                    }
                                  }
                                }
                              ],
                              "fun" : "assert"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  "children" : [
                    {
                      "kind" : "NonterminalNode",
                      "rule" : {
                        "head" : {
                          "kind" : "Nonterminal",
                          "name" : "B",
                          "preConditions" : [ ],
                          "postConditions" : [ ]
                        },
                        "body" : [
                          {
                            "kind" : "Terminal",
                            "name" : "'b'",
                            "preConditions" : [ ],
                            "postConditions" : [ ],
                            "nodeType" : "Literal",
                            "regex" : {
                              "kind" : "Char",
                              "lookaheads" : [ ],
                              "lookbehinds" : [ ],
                              "val" : 98
                            }
                          }
                        ],
                        "recursion" : "NON_REC",
                        "irecursion" : "NON_REC",
                        "leftEnd" : "",
                        "rightEnd" : "",
                        "leftEnds" : [ ],
                        "rightEnds" : [ ],
                        "associativity" : "UNDEFINED",
                        "precedence" : -1,
                        "precedenceLevel" : {
                          "lhs" : 1,
                          "rhs" : 1,
                          "undefined" : -1,
                          "hasPrefixUnary" : false,
                          "hasPostfixUnary" : false,
                          "hasPrefixUnaryBelow" : false,
                          "prefixUnaryBelow" : [ ],
                          "hasPostfixUnaryBelow" : false,
                          "postfixUnaryBelow" : [ ],
                          "index" : 1,
                          "containsAssociativityGroup" : false,
                          "assoc_lhs" : -1,
                          "assoc_rhs" : -1
                        }
                      },
                      "children" : [
                        {
                          "kind" : "KeywordTerminalNode",
                          "terminal" : {
                            "kind" : "Terminal",
                            "name" : "'b'",
                            "preConditions" : [ ],
                            "postConditions" : [ ],
                            "nodeType" : "Literal",
                            "regex" : {
                              "kind" : "Char",
                              "lookaheads" : [ ],
                              "lookbehinds" : [ ],
                              "val" : 98
                            }
                          },
                          "start" : 3,
                          "end" : 4
                        }
                      ],
                      "start" : 3,
                      "end" : 4
                    },
                    {
                      "kind" : "NonterminalNode",
                      "rule" : {
                        "head" : {
                          "kind" : "Nonterminal",
                          "name" : "C",
                          "preConditions" : [ ],
                          "postConditions" : [ ]
                        },
                        "body" : [
                          {
                            "kind" : "Terminal",
                            "name" : "'c'",
                            "preConditions" : [ ],
                            "postConditions" : [ ],
                            "nodeType" : "Literal",
                            "regex" : {
                              "kind" : "Char",
                              "lookaheads" : [ ],
                              "lookbehinds" : [ ],
                              "val" : 99
                            }
                          }
                        ],
                        "recursion" : "NON_REC",
                        "irecursion" : "NON_REC",
                        "leftEnd" : "",
                        "rightEnd" : "",
                        "leftEnds" : [ ],
                        "rightEnds" : [ ],
                        "associativity" : "UNDEFINED",
                        "precedence" : -1,
                        "precedenceLevel" : {
                          "lhs" : 1,
                          "rhs" : 1,
                          "undefined" : -1,
                          "hasPrefixUnary" : false,
                          "hasPostfixUnary" : false,
                          "hasPrefixUnaryBelow" : false,
                          "prefixUnaryBelow" : [ ],
                          "hasPostfixUnaryBelow" : false,
                          "postfixUnaryBelow" : [ ],
                          "index" : 1,
                          "containsAssociativityGroup" : false,
                          "assoc_lhs" : -1,
                          "assoc_rhs" : -1
                        }
                      },
                      "children" : [
                        {
                          "kind" : "KeywordTerminalNode",
                          "terminal" : {
                            "kind" : "Terminal",
                            "name" : "'c'",
                            "preConditions" : [ ],
                            "postConditions" : [ ],
                            "nodeType" : "Literal",
                            "regex" : {
                              "kind" : "Char",
                              "lookaheads" : [ ],
                              "lookbehinds" : [ ],
                              "val" : 99
                            }
                          },
                          "start" : 4,
                          "end" : 5
                        }
                      ],
                      "start" : 4,
                      "end" : 5
                    }
                  ],
                  "start" : 3,
                  "end" : 5
                },
                {
                  "kind" : "GroupNode",
                  "symbol" : {
                    "kind" : "Sequence",
                    "name" : "(B[a.rExt == b.lExt] {assert(b.lExt == 1)} b:C {assert(b.lExt == 2 || b.lExt == 4 || b.lExt == 6)})",
                    "preConditions" : [ ],
                    "postConditions" : [ ],
                    "symbols" : [
                      {
                        "kind" : "Code",
                        "name" : "B[a.rExt == b.lExt] {assert(b.lExt == 1)}",
                        "preConditions" : [ ],
                        "postConditions" : [ ],
                        "symbol" : {
                          "kind" : "Nonterminal",
                          "name" : "B",
                          "preConditions" : [ ],
                          "postConditions" : [
                            {
                              "kind" : "DataDependentCondition",
                              "type" : "DATA_DEPENDENT",
                              "expression" : {
                                "kind" : "Equal",
                                "lhs" : {
                                  "kind" : "RightExtent",
                                  "label" : "a"
                                },
                                "rhs" : {
                                  "kind" : "LeftExtent",
                                  "label" : "b"
                                }
                              }
                            }
                          ]
                        },
                        "statements" : [
                          {
                            "kind" : "ExpressionStatement",
                            "exp" : {
                              "kind" : "Assert",
                              "arguments" : [
                                {
                                  "kind" : "Equal",
                                  "lhs" : {
                                    "kind" : "LeftExtent",
                                    "label" : "b"
                                  },
                                  "rhs" : {
                                    "kind" : "Integer",
                                    "value" : 1
                                  }
                                }
                              ],
                              "fun" : "assert"
                            }
                          }
                        ]
                      },
                      {
                        "kind" : "Code",
                        "name" : "b:C {assert(b.lExt == 2 || b.lExt == 4 || b.lExt == 6)}",
                        "preConditions" : [ ],
                        "postConditions" : [ ],
                        "symbol" : {
                          "kind" : "Nonterminal",
                          "name" : "C",
                          "label" : "b",
                          "preConditions" : [ ],
                          "postConditions" : [ ]
                        },
                        "statements" : [
                          {
                            "kind" : "ExpressionStatement",
                            "exp" : {
                              "kind" : "Assert",
                              "arguments" : [
                                {
                                  "kind" : "Or",
                                  "lhs" : {
                                    "kind" : "Or",
                                    "lhs" : {
                                      "kind" : "Equal",
                                      "lhs" : {
                                        "kind" : "LeftExtent",
                                        "label" : "b"
                                      },
                                      "rhs" : {
                                        "kind" : "Integer",
                                        "value" : 2
                                      }
                                    },
                                    "rhs" : {
                                      "kind" : "Equal",
                                      "lhs" : {
                                        "kind" : "LeftExtent",
                                        "label" : "b"
                                      },
                                      "rhs" : {
                                        "kind" : "Integer",
                                        "value" : 4
                                      }
                                    }
                                  },
                                  "rhs" : {
                                    "kind" : "Equal",
                                    "lhs" : {
                                      "kind" : "LeftExtent",
                                      "label" : "b"
                                    },
                                    "rhs" : {
                                      "kind" : "Integer",
                                      "value" : 6
                                    }
                                  }
                                }
                              ],
                              "fun" : "assert"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  "children" : [
                    {
                      "kind" : "NonterminalNode",
                      "rule" : {
                        "head" : {
                          "kind" : "Nonterminal",
                          "name" : "B",
                          "preConditions" : [ ],
                          "postConditions" : [ ]
                        },
                        "body" : [
                          {
                            "kind" : "Terminal",
                            "name" : "'b'",
                            "preConditions" : [ ],
                            "postConditions" : [ ],
                            "nodeType" : "Literal",
                            "regex" : {
                              "kind" : "Char",
                              "lookaheads" : [ ],
                              "lookbehinds" : [ ],
                              "val" : 98
                            }
                          }
                        ],
                        "recursion" : "NON_REC",
                        "irecursion" : "NON_REC",
                        "leftEnd" : "",
                        "rightEnd" : "",
                        "leftEnds" : [ ],
                        "rightEnds" : [ ],
                        "associativity" : "UNDEFINED",
                        "precedence" : -1,
                        "precedenceLevel" : {
                          "lhs" : 1,
                          "rhs" : 1,
                          "undefined" : -1,
                          "hasPrefixUnary" : false,
                          "hasPostfixUnary" : false,
                          "hasPrefixUnaryBelow" : false,
                          "prefixUnaryBelow" : [ ],
                          "hasPostfixUnaryBelow" : false,
                          "postfixUnaryBelow" : [ ],
                          "index" : 1,
                          "containsAssociativityGroup" : false,
                          "assoc_lhs" : -1,
                          "assoc_rhs" : -1
                        }
                      },
                      "children" : [
                        {
                          "kind" : "KeywordTerminalNode",
                          "terminal" : {
                            "kind" : "Terminal",
                            "name" : "'b'",
                            "preConditions" : [ ],
                            "postConditions" : [ ],
                            "nodeType" : "Literal",
                            "regex" : {
                              "kind" : "Char",
                              "lookaheads" : [ ],
                              "lookbehinds" : [ ],
                              "val" : 98
                            }
                          },
                          "start" : 5,
                          "end" : 6
                        }
                      ],
                      "start" : 5,
                      "end" : 6
                    },
                    {
                      "kind" : "NonterminalNode",
                      "rule" : {
                        "head" : {
                          "kind" : "Nonterminal",
                          "name" : "C",
                          "preConditions" : [ ],
                          "postConditions" : [ ]
                        },
                        "body" : [
                          {
                            "kind" : "Terminal",
                            "name" : "'c'",
                            "preConditions" : [ ],
                            "postConditions" : [ ],
                            "nodeType" : "Literal",
                            "regex" : {
                              "kind" : "Char",
                              "lookaheads" : [ ],
                              "lookbehinds" : [ ],
                              "val" : 99
                            }
                          }
                        ],
                        "recursion" : "NON_REC",
                        "irecursion" : "NON_REC",
                        "leftEnd" : "",
                        "rightEnd" : "",
                        "leftEnds" : [ ],
                        "rightEnds" : [ ],
                        "associativity" : "UNDEFINED",
                        "precedence" : -1,
                        "precedenceLevel" : {
                          "lhs" : 1,
                          "rhs" : 1,
                          "undefined" : -1,
                          "hasPrefixUnary" : false,
                          "hasPostfixUnary" : false,
                          "hasPrefixUnaryBelow" : false,
                          "prefixUnaryBelow" : [ ],
                          "hasPostfixUnaryBelow" : false,
                          "postfixUnaryBelow" : [ ],
                          "index" : 1,
                          "containsAssociativityGroup" : false,
                          "assoc_lhs" : -1,
                          "assoc_rhs" : -1
                        }
                      },
                      "children" : [
                        {
                          "kind" : "KeywordTerminalNode",
                          "terminal" : {
                            "kind" : "Terminal",
                            "name" : "'c'",
                            "preConditions" : [ ],
                            "postConditions" : [ ],
                            "nodeType" : "Literal",
                            "regex" : {
                              "kind" : "Char",
                              "lookaheads" : [ ],
                              "lookbehinds" : [ ],
                              "val" : 99
                            }
                          },
                          "start" : 6,
                          "end" : 7
                        }
                      ],
                      "start" : 6,
                      "end" : 7
                    }
                  ],
                  "start" : 5,
                  "end" : 7
                }
              ],
              "start" : 1,
              "end" : 7
            }
          ],
          "start" : 0,
          "end" : 7
        }
      ],
      "start" : 0,
      "end" : 7
    }
  ],
  "start" : 0,
  "end" : 7
}