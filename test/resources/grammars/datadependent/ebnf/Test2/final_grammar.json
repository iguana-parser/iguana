{
  "rules" : [
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "S",
        "preConditions" : [ ],
        "postConditions" : [ ]
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "X",
          "preConditions" : [ ],
          "postConditions" : [ ]
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "(c:C {assert(c.lExt == 1 || c.lExt == 3)} D)",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "nodeType" : "Seq"
      },
      "body" : [
        {
          "kind" : "Code",
          "name" : "c:C {assert(c.lExt == 1 || c.lExt == 3)}",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "symbol" : {
            "kind" : "Nonterminal",
            "name" : "C",
            "label" : "c",
            "preConditions" : [ ],
            "postConditions" : [ ]
          },
          "statements" : [
            {
              "kind" : "ExpressionStatement",
              "exp" : {
                "kind" : "Assert",
                "arguments" : [
                  {
                    "kind" : "Or",
                    "lhs" : {
                      "kind" : "Equal",
                      "lhs" : {
                        "kind" : "LeftExtent",
                        "label" : "c"
                      },
                      "rhs" : {
                        "kind" : "Integer",
                        "value" : 1
                      }
                    },
                    "rhs" : {
                      "kind" : "Equal",
                      "lhs" : {
                        "kind" : "LeftExtent",
                        "label" : "c"
                      },
                      "rhs" : {
                        "kind" : "Integer",
                        "value" : 3
                      }
                    }
                  }
                ],
                "fun" : "assert"
              }
            }
          ]
        },
        {
          "kind" : "Nonterminal",
          "name" : "D",
          "label" : "d",
          "preConditions" : [ ],
          "postConditions" : [ ]
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "Sequence",
        "name" : "(c:C {assert(c.lExt == 1 || c.lExt == 3)} D)",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "symbols" : [
          {
            "kind" : "Code",
            "name" : "c:C {assert(c.lExt == 1 || c.lExt == 3)}",
            "preConditions" : [ ],
            "postConditions" : [ ],
            "symbol" : {
              "kind" : "Nonterminal",
              "name" : "C",
              "label" : "c",
              "preConditions" : [ ],
              "postConditions" : [ ]
            },
            "statements" : [
              {
                "kind" : "ExpressionStatement",
                "exp" : {
                  "kind" : "Assert",
                  "arguments" : [
                    {
                      "kind" : "Or",
                      "lhs" : {
                        "kind" : "Equal",
                        "lhs" : {
                          "kind" : "LeftExtent",
                          "label" : "c"
                        },
                        "rhs" : {
                          "kind" : "Integer",
                          "value" : 1
                        }
                      },
                      "rhs" : {
                        "kind" : "Equal",
                        "lhs" : {
                          "kind" : "LeftExtent",
                          "label" : "c"
                        },
                        "rhs" : {
                          "kind" : "Integer",
                          "value" : 3
                        }
                      }
                    }
                  ],
                  "fun" : "assert"
                }
              }
            ]
          },
          {
            "kind" : "Nonterminal",
            "name" : "D",
            "label" : "d",
            "preConditions" : [ ],
            "postConditions" : [ ]
          }
        ]
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "nodeType" : "Alt"
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "B",
          "label" : "b",
          "preConditions" : [ ],
          "postConditions" : [ ]
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "Alt",
        "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "symbols" : [
          {
            "kind" : "Nonterminal",
            "name" : "B",
            "label" : "b",
            "preConditions" : [ ],
            "postConditions" : [ ]
          },
          {
            "kind" : "Sequence",
            "name" : "(c:C {assert(c.lExt == 1 || c.lExt == 3)} D)",
            "preConditions" : [ ],
            "postConditions" : [ ],
            "symbols" : [
              {
                "kind" : "Code",
                "name" : "c:C {assert(c.lExt == 1 || c.lExt == 3)}",
                "preConditions" : [ ],
                "postConditions" : [ ],
                "symbol" : {
                  "kind" : "Nonterminal",
                  "name" : "C",
                  "label" : "c",
                  "preConditions" : [ ],
                  "postConditions" : [ ]
                },
                "statements" : [
                  {
                    "kind" : "ExpressionStatement",
                    "exp" : {
                      "kind" : "Assert",
                      "arguments" : [
                        {
                          "kind" : "Or",
                          "lhs" : {
                            "kind" : "Equal",
                            "lhs" : {
                              "kind" : "LeftExtent",
                              "label" : "c"
                            },
                            "rhs" : {
                              "kind" : "Integer",
                              "value" : 1
                            }
                          },
                          "rhs" : {
                            "kind" : "Equal",
                            "lhs" : {
                              "kind" : "LeftExtent",
                              "label" : "c"
                            },
                            "rhs" : {
                              "kind" : "Integer",
                              "value" : 3
                            }
                          }
                        }
                      ],
                      "fun" : "assert"
                    }
                  }
                ]
              },
              {
                "kind" : "Nonterminal",
                "name" : "D",
                "label" : "d",
                "preConditions" : [ ],
                "postConditions" : [ ]
              }
            ]
          }
        ]
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "nodeType" : "Alt"
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "(c:C {assert(c.lExt == 1 || c.lExt == 3)} D)",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "nodeType" : "Seq"
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "Alt",
        "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "symbols" : [
          {
            "kind" : "Nonterminal",
            "name" : "B",
            "label" : "b",
            "preConditions" : [ ],
            "postConditions" : [ ]
          },
          {
            "kind" : "Sequence",
            "name" : "(c:C {assert(c.lExt == 1 || c.lExt == 3)} D)",
            "preConditions" : [ ],
            "postConditions" : [ ],
            "symbols" : [
              {
                "kind" : "Code",
                "name" : "c:C {assert(c.lExt == 1 || c.lExt == 3)}",
                "preConditions" : [ ],
                "postConditions" : [ ],
                "symbol" : {
                  "kind" : "Nonterminal",
                  "name" : "C",
                  "label" : "c",
                  "preConditions" : [ ],
                  "postConditions" : [ ]
                },
                "statements" : [
                  {
                    "kind" : "ExpressionStatement",
                    "exp" : {
                      "kind" : "Assert",
                      "arguments" : [
                        {
                          "kind" : "Or",
                          "lhs" : {
                            "kind" : "Equal",
                            "lhs" : {
                              "kind" : "LeftExtent",
                              "label" : "c"
                            },
                            "rhs" : {
                              "kind" : "Integer",
                              "value" : 1
                            }
                          },
                          "rhs" : {
                            "kind" : "Equal",
                            "lhs" : {
                              "kind" : "LeftExtent",
                              "label" : "c"
                            },
                            "rhs" : {
                              "kind" : "Integer",
                              "value" : 3
                            }
                          }
                        }
                      ],
                      "fun" : "assert"
                    }
                  }
                ]
              },
              {
                "kind" : "Nonterminal",
                "name" : "D",
                "label" : "d",
                "preConditions" : [ ],
                "postConditions" : [ ]
              }
            ]
          }
        ]
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))+",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "nodeType" : "Plus"
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))+",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "nodeType" : "Plus"
        },
        {
          "kind" : "Nonterminal",
          "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "nodeType" : "Alt"
        }
      ],
      "recursion" : "LEFT_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : 1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "Plus",
        "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))+",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "s" : {
          "kind" : "Alt",
          "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "symbols" : [
            {
              "kind" : "Nonterminal",
              "name" : "B",
              "label" : "b",
              "preConditions" : [ ],
              "postConditions" : [ ]
            },
            {
              "kind" : "Sequence",
              "name" : "(c:C {assert(c.lExt == 1 || c.lExt == 3)} D)",
              "preConditions" : [ ],
              "postConditions" : [ ],
              "symbols" : [
                {
                  "kind" : "Code",
                  "name" : "c:C {assert(c.lExt == 1 || c.lExt == 3)}",
                  "preConditions" : [ ],
                  "postConditions" : [ ],
                  "symbol" : {
                    "kind" : "Nonterminal",
                    "name" : "C",
                    "label" : "c",
                    "preConditions" : [ ],
                    "postConditions" : [ ]
                  },
                  "statements" : [
                    {
                      "kind" : "ExpressionStatement",
                      "exp" : {
                        "kind" : "Assert",
                        "arguments" : [
                          {
                            "kind" : "Or",
                            "lhs" : {
                              "kind" : "Equal",
                              "lhs" : {
                                "kind" : "LeftExtent",
                                "label" : "c"
                              },
                              "rhs" : {
                                "kind" : "Integer",
                                "value" : 1
                              }
                            },
                            "rhs" : {
                              "kind" : "Equal",
                              "lhs" : {
                                "kind" : "LeftExtent",
                                "label" : "c"
                              },
                              "rhs" : {
                                "kind" : "Integer",
                                "value" : 3
                              }
                            }
                          }
                        ],
                        "fun" : "assert"
                      }
                    }
                  ]
                },
                {
                  "kind" : "Nonterminal",
                  "name" : "D",
                  "label" : "d",
                  "preConditions" : [ ],
                  "postConditions" : [ ]
                }
              ]
            }
          ]
        },
        "separators" : [ ]
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))+",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "nodeType" : "Plus"
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "nodeType" : "Alt"
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "Plus",
        "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))+",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "s" : {
          "kind" : "Alt",
          "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "symbols" : [
            {
              "kind" : "Nonterminal",
              "name" : "B",
              "label" : "b",
              "preConditions" : [ ],
              "postConditions" : [ ]
            },
            {
              "kind" : "Sequence",
              "name" : "(c:C {assert(c.lExt == 1 || c.lExt == 3)} D)",
              "preConditions" : [ ],
              "postConditions" : [ ],
              "symbols" : [
                {
                  "kind" : "Code",
                  "name" : "c:C {assert(c.lExt == 1 || c.lExt == 3)}",
                  "preConditions" : [ ],
                  "postConditions" : [ ],
                  "symbol" : {
                    "kind" : "Nonterminal",
                    "name" : "C",
                    "label" : "c",
                    "preConditions" : [ ],
                    "postConditions" : [ ]
                  },
                  "statements" : [
                    {
                      "kind" : "ExpressionStatement",
                      "exp" : {
                        "kind" : "Assert",
                        "arguments" : [
                          {
                            "kind" : "Or",
                            "lhs" : {
                              "kind" : "Equal",
                              "lhs" : {
                                "kind" : "LeftExtent",
                                "label" : "c"
                              },
                              "rhs" : {
                                "kind" : "Integer",
                                "value" : 1
                              }
                            },
                            "rhs" : {
                              "kind" : "Equal",
                              "lhs" : {
                                "kind" : "LeftExtent",
                                "label" : "c"
                              },
                              "rhs" : {
                                "kind" : "Integer",
                                "value" : 3
                              }
                            }
                          }
                        ],
                        "fun" : "assert"
                      }
                    }
                  ]
                },
                {
                  "kind" : "Nonterminal",
                  "name" : "D",
                  "label" : "d",
                  "preConditions" : [ ],
                  "postConditions" : [ ]
                }
              ]
            }
          ]
        },
        "separators" : [ ]
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))*",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "nodeType" : "Star"
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))+",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "nodeType" : "Plus"
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "Star",
        "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))*",
        "label" : "s",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "s" : {
          "kind" : "Alt",
          "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "symbols" : [
            {
              "kind" : "Nonterminal",
              "name" : "B",
              "label" : "b",
              "preConditions" : [ ],
              "postConditions" : [ ]
            },
            {
              "kind" : "Sequence",
              "name" : "(c:C {assert(c.lExt == 1 || c.lExt == 3)} D)",
              "preConditions" : [ ],
              "postConditions" : [ ],
              "symbols" : [
                {
                  "kind" : "Code",
                  "name" : "c:C {assert(c.lExt == 1 || c.lExt == 3)}",
                  "preConditions" : [ ],
                  "postConditions" : [ ],
                  "symbol" : {
                    "kind" : "Nonterminal",
                    "name" : "C",
                    "label" : "c",
                    "preConditions" : [ ],
                    "postConditions" : [ ]
                  },
                  "statements" : [
                    {
                      "kind" : "ExpressionStatement",
                      "exp" : {
                        "kind" : "Assert",
                        "arguments" : [
                          {
                            "kind" : "Or",
                            "lhs" : {
                              "kind" : "Equal",
                              "lhs" : {
                                "kind" : "LeftExtent",
                                "label" : "c"
                              },
                              "rhs" : {
                                "kind" : "Integer",
                                "value" : 1
                              }
                            },
                            "rhs" : {
                              "kind" : "Equal",
                              "lhs" : {
                                "kind" : "LeftExtent",
                                "label" : "c"
                              },
                              "rhs" : {
                                "kind" : "Integer",
                                "value" : 3
                              }
                            }
                          }
                        ],
                        "fun" : "assert"
                      }
                    }
                  ]
                },
                {
                  "kind" : "Nonterminal",
                  "name" : "D",
                  "label" : "d",
                  "preConditions" : [ ],
                  "postConditions" : [ ]
                }
              ]
            }
          ]
        },
        "separators" : [ ]
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))*",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "nodeType" : "Star"
      },
      "body" : [ ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "Star",
        "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))*",
        "label" : "s",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "s" : {
          "kind" : "Alt",
          "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "symbols" : [
            {
              "kind" : "Nonterminal",
              "name" : "B",
              "label" : "b",
              "preConditions" : [ ],
              "postConditions" : [ ]
            },
            {
              "kind" : "Sequence",
              "name" : "(c:C {assert(c.lExt == 1 || c.lExt == 3)} D)",
              "preConditions" : [ ],
              "postConditions" : [ ],
              "symbols" : [
                {
                  "kind" : "Code",
                  "name" : "c:C {assert(c.lExt == 1 || c.lExt == 3)}",
                  "preConditions" : [ ],
                  "postConditions" : [ ],
                  "symbol" : {
                    "kind" : "Nonterminal",
                    "name" : "C",
                    "label" : "c",
                    "preConditions" : [ ],
                    "postConditions" : [ ]
                  },
                  "statements" : [
                    {
                      "kind" : "ExpressionStatement",
                      "exp" : {
                        "kind" : "Assert",
                        "arguments" : [
                          {
                            "kind" : "Or",
                            "lhs" : {
                              "kind" : "Equal",
                              "lhs" : {
                                "kind" : "LeftExtent",
                                "label" : "c"
                              },
                              "rhs" : {
                                "kind" : "Integer",
                                "value" : 1
                              }
                            },
                            "rhs" : {
                              "kind" : "Equal",
                              "lhs" : {
                                "kind" : "LeftExtent",
                                "label" : "c"
                              },
                              "rhs" : {
                                "kind" : "Integer",
                                "value" : 3
                              }
                            }
                          }
                        ],
                        "fun" : "assert"
                      }
                    }
                  ]
                },
                {
                  "kind" : "Nonterminal",
                  "name" : "D",
                  "label" : "d",
                  "preConditions" : [ ],
                  "postConditions" : [ ]
                }
              ]
            }
          ]
        },
        "separators" : [ ]
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "X",
        "preConditions" : [ ],
        "postConditions" : [ ]
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "A",
          "preConditions" : [ ],
          "postConditions" : [ ]
        },
        {
          "kind" : "Nonterminal",
          "name" : "(B | (c:C {assert(c.lExt == 1 || c.lExt == 3)} D))*",
          "label" : "s",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "nodeType" : "Star"
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "A",
        "preConditions" : [ ],
        "postConditions" : [ ]
      },
      "body" : [
        {
          "kind" : "Terminal",
          "name" : "'a'",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "nodeType" : "Literal",
          "regex" : {
            "kind" : "Char",
            "lookaheads" : [ ],
            "lookbehinds" : [ ],
            "val" : 97
          }
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "B",
        "preConditions" : [ ],
        "postConditions" : [ ]
      },
      "body" : [
        {
          "kind" : "Terminal",
          "name" : "'b'",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "nodeType" : "Literal",
          "regex" : {
            "kind" : "Char",
            "lookaheads" : [ ],
            "lookbehinds" : [ ],
            "val" : 98
          }
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "C",
        "preConditions" : [ ],
        "postConditions" : [ ]
      },
      "body" : [
        {
          "kind" : "Terminal",
          "name" : "'c'",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "nodeType" : "Literal",
          "regex" : {
            "kind" : "Char",
            "lookaheads" : [ ],
            "lookbehinds" : [ ],
            "val" : 99
          }
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "D",
        "preConditions" : [ ],
        "postConditions" : [ ]
      },
      "body" : [
        {
          "kind" : "Terminal",
          "name" : "'d'",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "nodeType" : "Literal",
          "regex" : {
            "kind" : "Char",
            "lookaheads" : [ ],
            "lookbehinds" : [ ],
            "val" : 100
          }
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "Start(S)",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "nodeType" : "Start"
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "S",
          "label" : "top",
          "preConditions" : [ ],
          "postConditions" : [ ]
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "Start",
        "name" : "Start(S)",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "startSymbol" : "S"
      }
    }
  ],
  "regularExpressionDefinitions" : { },
  "ebnfLefts" : {
    "*" : [
      "+"
    ],
    "+" : [
      ""
    ]
  },
  "ebnfRights" : {
    "*" : [
      "",
      "+"
    ],
    "+" : [
      ""
    ]
  },
  "startSymbols" : [
    {
      "kind" : "Start",
      "name" : "Start(S)",
      "preConditions" : [ ],
      "postConditions" : [ ],
      "startSymbol" : "S"
    },
    {
      "kind" : "Start",
      "name" : "Start(S)",
      "preConditions" : [ ],
      "postConditions" : [ ],
      "startSymbol" : "S"
    }
  ],
  "globals" : { }
}