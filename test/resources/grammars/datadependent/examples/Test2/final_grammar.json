{
  "rules" : [
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "S",
        "preConditions" : [ ],
        "postConditions" : [ ]
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "AB",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "arguments" : [
            {
              "kind" : "Integer",
              "value" : 5
            },
            {
              "kind" : "Integer",
              "value" : 6
            }
          ]
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "IF_THEN_ELSE_0",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "parameters" : [
          "condIF",
          "x",
          "y"
        ]
      },
      "body" : [
        {
          "kind" : "Code",
          "name" : "A {assert(x == 5)}",
          "preConditions" : [
            {
              "kind" : "DataDependentCondition",
              "type" : "DATA_DEPENDENT",
              "expression" : {
                "kind" : "Name",
                "name" : "condIF",
                "i" : -1
              }
            }
          ],
          "postConditions" : [ ],
          "symbol" : {
            "kind" : "Nonterminal",
            "name" : "A",
            "preConditions" : [ ],
            "postConditions" : [ ]
          },
          "statements" : [
            {
              "kind" : "ExpressionStatement",
              "exp" : {
                "kind" : "Assert",
                "arguments" : [
                  {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "Name",
                      "name" : "x",
                      "i" : -1
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 5
                    }
                  }
                ],
                "fun" : "assert"
              }
            }
          ]
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "IfThenElse",
        "name" : "if (x == 5) A {assert(x == 5)} else B {assert(y == 6)};",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "expression" : {
          "kind" : "Equal",
          "lhs" : {
            "kind" : "Name",
            "name" : "x",
            "i" : -1
          },
          "rhs" : {
            "kind" : "Integer",
            "value" : 5
          }
        },
        "thenPart" : {
          "kind" : "Code",
          "name" : "A {assert(x == 5)}",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "symbol" : {
            "kind" : "Nonterminal",
            "name" : "A",
            "preConditions" : [ ],
            "postConditions" : [ ]
          },
          "statements" : [
            {
              "kind" : "ExpressionStatement",
              "exp" : {
                "kind" : "Assert",
                "arguments" : [
                  {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "Name",
                      "name" : "x",
                      "i" : -1
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 5
                    }
                  }
                ],
                "fun" : "assert"
              }
            }
          ]
        },
        "elsePart" : {
          "kind" : "Code",
          "name" : "B {assert(y == 6)}",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "symbol" : {
            "kind" : "Nonterminal",
            "name" : "B",
            "preConditions" : [ ],
            "postConditions" : [ ]
          },
          "statements" : [
            {
              "kind" : "ExpressionStatement",
              "exp" : {
                "kind" : "Assert",
                "arguments" : [
                  {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "Name",
                      "name" : "y",
                      "i" : -1
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 6
                    }
                  }
                ],
                "fun" : "assert"
              }
            }
          ]
        }
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "IF_THEN_ELSE_0",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "parameters" : [
          "condIF",
          "x",
          "y"
        ]
      },
      "body" : [
        {
          "kind" : "Code",
          "name" : "B {assert(y == 6)}",
          "preConditions" : [
            {
              "kind" : "DataDependentCondition",
              "type" : "DATA_DEPENDENT",
              "expression" : {
                "kind" : "Not",
                "exp" : {
                  "kind" : "Name",
                  "name" : "condIF",
                  "i" : -1
                }
              }
            }
          ],
          "postConditions" : [ ],
          "symbol" : {
            "kind" : "Nonterminal",
            "name" : "B",
            "preConditions" : [ ],
            "postConditions" : [ ]
          },
          "statements" : [
            {
              "kind" : "ExpressionStatement",
              "exp" : {
                "kind" : "Assert",
                "arguments" : [
                  {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "Name",
                      "name" : "y",
                      "i" : -1
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 6
                    }
                  }
                ],
                "fun" : "assert"
              }
            }
          ]
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "IfThenElse",
        "name" : "if (x == 5) A {assert(x == 5)} else B {assert(y == 6)};",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "expression" : {
          "kind" : "Equal",
          "lhs" : {
            "kind" : "Name",
            "name" : "x",
            "i" : -1
          },
          "rhs" : {
            "kind" : "Integer",
            "value" : 5
          }
        },
        "thenPart" : {
          "kind" : "Code",
          "name" : "A {assert(x == 5)}",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "symbol" : {
            "kind" : "Nonterminal",
            "name" : "A",
            "preConditions" : [ ],
            "postConditions" : [ ]
          },
          "statements" : [
            {
              "kind" : "ExpressionStatement",
              "exp" : {
                "kind" : "Assert",
                "arguments" : [
                  {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "Name",
                      "name" : "x",
                      "i" : -1
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 5
                    }
                  }
                ],
                "fun" : "assert"
              }
            }
          ]
        },
        "elsePart" : {
          "kind" : "Code",
          "name" : "B {assert(y == 6)}",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "symbol" : {
            "kind" : "Nonterminal",
            "name" : "B",
            "preConditions" : [ ],
            "postConditions" : [ ]
          },
          "statements" : [
            {
              "kind" : "ExpressionStatement",
              "exp" : {
                "kind" : "Assert",
                "arguments" : [
                  {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "Name",
                      "name" : "y",
                      "i" : -1
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 6
                    }
                  }
                ],
                "fun" : "assert"
              }
            }
          ]
        }
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "AB",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "parameters" : [
          "a",
          "b"
        ]
      },
      "body" : [
        {
          "kind" : "Code",
          "name" : "'c' {var x = a;var y = b}",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "symbol" : {
            "kind" : "Terminal",
            "name" : "'c'",
            "preConditions" : [ ],
            "postConditions" : [ ],
            "nodeType" : "Literal",
            "regex" : {
              "kind" : "Char",
              "lookaheads" : [ ],
              "lookbehinds" : [ ],
              "val" : 99
            }
          },
          "statements" : [
            {
              "kind" : "VariableDeclaration",
              "decl" : {
                "name" : "x",
                "i" : -1,
                "expression" : {
                  "kind" : "Name",
                  "name" : "a",
                  "i" : -1
                }
              }
            },
            {
              "kind" : "VariableDeclaration",
              "decl" : {
                "name" : "y",
                "i" : -1,
                "expression" : {
                  "kind" : "Name",
                  "name" : "b",
                  "i" : -1
                }
              }
            }
          ]
        },
        {
          "kind" : "Nonterminal",
          "name" : "IF_THEN_ELSE_0",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "parameters" : [
            "condIF",
            "x",
            "y"
          ],
          "arguments" : [
            {
              "kind" : "Equal",
              "lhs" : {
                "kind" : "Name",
                "name" : "x",
                "i" : -1
              },
              "rhs" : {
                "kind" : "Integer",
                "value" : 5
              }
            },
            {
              "kind" : "Name",
              "name" : "x",
              "i" : -1
            },
            {
              "kind" : "Name",
              "name" : "y",
              "i" : -1
            }
          ]
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "A",
        "preConditions" : [ ],
        "postConditions" : [ ]
      },
      "body" : [
        {
          "kind" : "Terminal",
          "name" : "'a'",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "nodeType" : "Literal",
          "regex" : {
            "kind" : "Char",
            "lookaheads" : [ ],
            "lookbehinds" : [ ],
            "val" : 97
          }
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "B",
        "preConditions" : [ ],
        "postConditions" : [ ]
      },
      "body" : [
        {
          "kind" : "Terminal",
          "name" : "'b'",
          "preConditions" : [ ],
          "postConditions" : [ ],
          "nodeType" : "Literal",
          "regex" : {
            "kind" : "Char",
            "lookaheads" : [ ],
            "lookbehinds" : [ ],
            "val" : 98
          }
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      }
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "Start(S)",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "nodeType" : "Start"
      },
      "body" : [
        {
          "kind" : "Nonterminal",
          "name" : "S",
          "label" : "top",
          "preConditions" : [ ],
          "postConditions" : [ ]
        }
      ],
      "recursion" : "NON_REC",
      "irecursion" : "NON_REC",
      "leftEnd" : "",
      "rightEnd" : "",
      "leftEnds" : [ ],
      "rightEnds" : [ ],
      "associativity" : "UNDEFINED",
      "precedence" : -1,
      "precedenceLevel" : {
        "lhs" : 1,
        "rhs" : 1,
        "undefined" : -1,
        "hasPrefixUnary" : false,
        "hasPostfixUnary" : false,
        "hasPrefixUnaryBelow" : false,
        "prefixUnaryBelow" : [ ],
        "hasPostfixUnaryBelow" : false,
        "postfixUnaryBelow" : [ ],
        "index" : 1,
        "containsAssociativityGroup" : false,
        "assoc_lhs" : -1,
        "assoc_rhs" : -1
      },
      "definition" : {
        "kind" : "Start",
        "name" : "Start(S)",
        "preConditions" : [ ],
        "postConditions" : [ ],
        "startSymbol" : "S"
      }
    }
  ],
  "regularExpressionDefinitions" : { },
  "ebnfLefts" : { },
  "ebnfRights" : { },
  "startSymbols" : [
    {
      "kind" : "Start",
      "name" : "Start(S)",
      "preConditions" : [ ],
      "postConditions" : [ ],
      "startSymbol" : "S"
    },
    {
      "kind" : "Start",
      "name" : "Start(S)",
      "preConditions" : [ ],
      "postConditions" : [ ],
      "startSymbol" : "S"
    }
  ],
  "globals" : { }
}