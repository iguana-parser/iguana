{
  "kind" : "MetaSymbolNode",
  "symbol" : {
    "kind" : "Start",
    "name" : "Start(S)",
    "startSymbol" : "S"
  },
  "start" : 0,
  "end" : 2,
  "children" : [
    {
      "kind" : "NonterminalNode",
      "rule" : {
        "head" : {
          "kind" : "Nonterminal",
          "name" : "S"
        },
        "body" : [
          {
            "kind" : "Nonterminal",
            "name" : "AB",
            "arguments" : [
              {
                "kind" : "Integer",
                "value" : 5
              },
              {
                "kind" : "Integer",
                "value" : 6
              }
            ]
          }
        ]
      },
      "children" : [
        {
          "kind" : "NonterminalNode",
          "rule" : {
            "head" : {
              "kind" : "Nonterminal",
              "name" : "AB",
              "parameters" : [
                "a",
                "b"
              ]
            },
            "body" : [
              {
                "kind" : "Code",
                "name" : "c {var x = a;var y = b}",
                "symbol" : {
                  "kind" : "Terminal",
                  "name" : "c",
                  "regex" : {
                    "kind" : "Char",
                    "val" : 99
                  }
                },
                "statements" : [
                  {
                    "kind" : "VariableDeclaration",
                    "decl" : {
                      "name" : "x",
                      "i" : -1,
                      "expression" : {
                        "kind" : "Name",
                        "name" : "a",
                        "i" : -1
                      }
                    }
                  },
                  {
                    "kind" : "VariableDeclaration",
                    "decl" : {
                      "name" : "y",
                      "i" : -1,
                      "expression" : {
                        "kind" : "Name",
                        "name" : "b",
                        "i" : -1
                      }
                    }
                  }
                ]
              },
              {
                "kind" : "Nonterminal",
                "name" : "IF_THEN_ELSE_0",
                "parameters" : [
                  "condIF",
                  "x",
                  "y"
                ],
                "arguments" : [
                  {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "Name",
                      "name" : "x",
                      "i" : -1
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 5
                    }
                  },
                  {
                    "kind" : "Name",
                    "name" : "x",
                    "i" : -1
                  },
                  {
                    "kind" : "Name",
                    "name" : "y",
                    "i" : -1
                  }
                ]
              }
            ]
          },
          "children" : [
            {
              "kind" : "TerminalNode",
              "terminal" : {
                "kind" : "Terminal",
                "name" : "c",
                "regex" : {
                  "kind" : "Char",
                  "val" : 99
                }
              },
              "start" : 0,
              "end" : 1
            },
            {
              "kind" : "NonterminalNode",
              "rule" : {
                "head" : {
                  "kind" : "Nonterminal",
                  "name" : "IF_THEN_ELSE_0",
                  "parameters" : [
                    "condIF",
                    "x",
                    "y"
                  ]
                },
                "body" : [
                  {
                    "kind" : "Code",
                    "name" : "A {println(x)}",
                    "preConditions" : [
                      {
                        "kind" : "DataDependentCondition",
                        "type" : "DATA_DEPENDENT",
                        "expression" : {
                          "kind" : "Name",
                          "name" : "condIF",
                          "i" : -1
                        }
                      }
                    ],
                    "symbol" : {
                      "kind" : "Nonterminal",
                      "name" : "A"
                    },
                    "statements" : [
                      {
                        "kind" : "ExpressionStatement",
                        "exp" : {
                          "kind" : "Println",
                          "arguments" : [
                            {
                              "kind" : "Name",
                              "name" : "x",
                              "i" : -1
                            }
                          ],
                          "fun" : "println"
                        }
                      }
                    ]
                  }
                ],
                "definition" : {
                  "kind" : "IfThenElse",
                  "name" : "if (x == 5) A {println(x)} else B {println(y)};",
                  "expression" : {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "Name",
                      "name" : "x",
                      "i" : -1
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 5
                    }
                  },
                  "thenPart" : {
                    "kind" : "Code",
                    "name" : "A {println(x)}",
                    "symbol" : {
                      "kind" : "Nonterminal",
                      "name" : "A"
                    },
                    "statements" : [
                      {
                        "kind" : "ExpressionStatement",
                        "exp" : {
                          "kind" : "Println",
                          "arguments" : [
                            {
                              "kind" : "Name",
                              "name" : "x",
                              "i" : -1
                            }
                          ],
                          "fun" : "println"
                        }
                      }
                    ]
                  },
                  "elsePart" : {
                    "kind" : "Code",
                    "name" : "B {println(y)}",
                    "symbol" : {
                      "kind" : "Nonterminal",
                      "name" : "B"
                    },
                    "statements" : [
                      {
                        "kind" : "ExpressionStatement",
                        "exp" : {
                          "kind" : "Println",
                          "arguments" : [
                            {
                              "kind" : "Name",
                              "name" : "y",
                              "i" : -1
                            }
                          ],
                          "fun" : "println"
                        }
                      }
                    ]
                  }
                }
              },
              "children" : [
                {
                  "kind" : "NonterminalNode",
                  "rule" : {
                    "head" : {
                      "kind" : "Nonterminal",
                      "name" : "A"
                    },
                    "body" : [
                      {
                        "kind" : "Terminal",
                        "name" : "a",
                        "regex" : {
                          "kind" : "Char",
                          "val" : 97
                        }
                      }
                    ]
                  },
                  "children" : [
                    {
                      "kind" : "TerminalNode",
                      "terminal" : {
                        "kind" : "Terminal",
                        "name" : "a",
                        "regex" : {
                          "kind" : "Char",
                          "val" : 97
                        }
                      },
                      "start" : 1,
                      "end" : 2
                    }
                  ],
                  "start" : 1,
                  "end" : 2
                }
              ],
              "start" : 1,
              "end" : 2
            }
          ],
          "start" : 0,
          "end" : 2
        }
      ],
      "start" : 0,
      "end" : 2
    }
  ]
}