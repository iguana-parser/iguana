{
  "kind" : "StartNode",
  "symbol" : {
    "kind" : "Start",
    "name" : "Start(S)",
    "startSymbol" : "S"
  },
  "children" : [
    {
      "kind" : "NonterminalNode",
      "rule" : {
        "head" : {
          "kind" : "Nonterminal",
          "name" : "S"
        },
        "body" : [
          {
            "kind" : "Nonterminal",
            "name" : "AB",
            "arguments" : [
              {
                "kind" : "Integer",
                "value" : 5
              },
              {
                "kind" : "Integer",
                "value" : 6
              }
            ]
          }
        ],
        "recursion" : "NON_REC",
        "irecursion" : "NON_REC",
        "associativity" : "UNDEFINED",
        "precedence" : -1,
        "precedenceLevel" : {
          "lhs" : 1,
          "rhs" : 1,
          "undefined" : -1,
          "hasPrefixUnary" : false,
          "hasPostfixUnary" : false,
          "hasPrefixUnaryBelow" : false,
          "hasPostfixUnaryBelow" : false,
          "index" : 1,
          "containsAssociativityGroup" : false,
          "assoc_lhs" : -1,
          "assoc_rhs" : -1
        }
      },
      "children" : [
        {
          "kind" : "NonterminalNode",
          "rule" : {
            "head" : {
              "kind" : "Nonterminal",
              "name" : "AB",
              "parameters" : [
                "a",
                "b"
              ]
            },
            "body" : [
              {
                "kind" : "Code",
                "name" : "'c' {var x = a;var y = b}",
                "symbol" : {
                  "kind" : "Terminal",
                  "name" : "'c'",
                  "nodeType" : "Literal",
                  "regex" : {
                    "kind" : "Char",
                    "val" : 99
                  }
                },
                "statements" : [
                  {
                    "kind" : "VariableDeclaration",
                    "decl" : {
                      "name" : "x",
                      "i" : -1,
                      "expression" : {
                        "kind" : "Name",
                        "name" : "a",
                        "i" : -1
                      }
                    }
                  },
                  {
                    "kind" : "VariableDeclaration",
                    "decl" : {
                      "name" : "y",
                      "i" : -1,
                      "expression" : {
                        "kind" : "Name",
                        "name" : "b",
                        "i" : -1
                      }
                    }
                  }
                ]
              },
              {
                "kind" : "Nonterminal",
                "name" : "IF_THEN_ELSE_0",
                "parameters" : [
                  "condIF",
                  "x",
                  "y"
                ],
                "arguments" : [
                  {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "Name",
                      "name" : "x",
                      "i" : -1
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 5
                    }
                  },
                  {
                    "kind" : "Name",
                    "name" : "x",
                    "i" : -1
                  },
                  {
                    "kind" : "Name",
                    "name" : "y",
                    "i" : -1
                  }
                ]
              }
            ],
            "recursion" : "NON_REC",
            "irecursion" : "NON_REC",
            "associativity" : "UNDEFINED",
            "precedence" : -1,
            "precedenceLevel" : {
              "lhs" : 1,
              "rhs" : 1,
              "undefined" : -1,
              "hasPrefixUnary" : false,
              "hasPostfixUnary" : false,
              "hasPrefixUnaryBelow" : false,
              "hasPostfixUnaryBelow" : false,
              "index" : 1,
              "containsAssociativityGroup" : false,
              "assoc_lhs" : -1,
              "assoc_rhs" : -1
            }
          },
          "children" : [
            {
              "kind" : "KeywordTerminalNode",
              "terminal" : {
                "kind" : "Terminal",
                "name" : "'c'",
                "nodeType" : "Literal",
                "regex" : {
                  "kind" : "Char",
                  "val" : 99
                }
              },
              "start" : 0,
              "end" : 1
            },
            {
              "kind" : "NonterminalNode",
              "rule" : {
                "head" : {
                  "kind" : "Nonterminal",
                  "name" : "IF_THEN_ELSE_0",
                  "parameters" : [
                    "condIF",
                    "x",
                    "y"
                  ]
                },
                "body" : [
                  {
                    "kind" : "Code",
                    "name" : "A {assert(x == 5)}",
                    "preConditions" : [
                      {
                        "kind" : "DataDependentCondition",
                        "type" : "DATA_DEPENDENT",
                        "expression" : {
                          "kind" : "Name",
                          "name" : "condIF",
                          "i" : -1
                        }
                      }
                    ],
                    "symbol" : {
                      "kind" : "Nonterminal",
                      "name" : "A"
                    },
                    "statements" : [
                      {
                        "kind" : "ExpressionStatement",
                        "exp" : {
                          "kind" : "Assert",
                          "arguments" : [
                            {
                              "kind" : "Equal",
                              "lhs" : {
                                "kind" : "Name",
                                "name" : "x",
                                "i" : -1
                              },
                              "rhs" : {
                                "kind" : "Integer",
                                "value" : 5
                              }
                            }
                          ],
                          "fun" : "assert"
                        }
                      }
                    ]
                  }
                ],
                "recursion" : "NON_REC",
                "irecursion" : "NON_REC",
                "associativity" : "UNDEFINED",
                "precedence" : -1,
                "precedenceLevel" : {
                  "lhs" : 1,
                  "rhs" : 1,
                  "undefined" : -1,
                  "hasPrefixUnary" : false,
                  "hasPostfixUnary" : false,
                  "hasPrefixUnaryBelow" : false,
                  "hasPostfixUnaryBelow" : false,
                  "index" : 1,
                  "containsAssociativityGroup" : false,
                  "assoc_lhs" : -1,
                  "assoc_rhs" : -1
                },
                "definition" : {
                  "kind" : "IfThenElse",
                  "name" : "if (x == 5) A {assert(x == 5)} else B {assert(y == 6)};",
                  "expression" : {
                    "kind" : "Equal",
                    "lhs" : {
                      "kind" : "Name",
                      "name" : "x",
                      "i" : -1
                    },
                    "rhs" : {
                      "kind" : "Integer",
                      "value" : 5
                    }
                  },
                  "thenPart" : {
                    "kind" : "Code",
                    "name" : "A {assert(x == 5)}",
                    "symbol" : {
                      "kind" : "Nonterminal",
                      "name" : "A"
                    },
                    "statements" : [
                      {
                        "kind" : "ExpressionStatement",
                        "exp" : {
                          "kind" : "Assert",
                          "arguments" : [
                            {
                              "kind" : "Equal",
                              "lhs" : {
                                "kind" : "Name",
                                "name" : "x",
                                "i" : -1
                              },
                              "rhs" : {
                                "kind" : "Integer",
                                "value" : 5
                              }
                            }
                          ],
                          "fun" : "assert"
                        }
                      }
                    ]
                  },
                  "elsePart" : {
                    "kind" : "Code",
                    "name" : "B {assert(y == 6)}",
                    "symbol" : {
                      "kind" : "Nonterminal",
                      "name" : "B"
                    },
                    "statements" : [
                      {
                        "kind" : "ExpressionStatement",
                        "exp" : {
                          "kind" : "Assert",
                          "arguments" : [
                            {
                              "kind" : "Equal",
                              "lhs" : {
                                "kind" : "Name",
                                "name" : "y",
                                "i" : -1
                              },
                              "rhs" : {
                                "kind" : "Integer",
                                "value" : 6
                              }
                            }
                          ],
                          "fun" : "assert"
                        }
                      }
                    ]
                  }
                }
              },
              "children" : [
                {
                  "kind" : "NonterminalNode",
                  "rule" : {
                    "head" : {
                      "kind" : "Nonterminal",
                      "name" : "A"
                    },
                    "body" : [
                      {
                        "kind" : "Terminal",
                        "name" : "'a'",
                        "nodeType" : "Literal",
                        "regex" : {
                          "kind" : "Char",
                          "val" : 97
                        }
                      }
                    ],
                    "recursion" : "NON_REC",
                    "irecursion" : "NON_REC",
                    "associativity" : "UNDEFINED",
                    "precedence" : -1,
                    "precedenceLevel" : {
                      "lhs" : 1,
                      "rhs" : 1,
                      "undefined" : -1,
                      "hasPrefixUnary" : false,
                      "hasPostfixUnary" : false,
                      "hasPrefixUnaryBelow" : false,
                      "hasPostfixUnaryBelow" : false,
                      "index" : 1,
                      "containsAssociativityGroup" : false,
                      "assoc_lhs" : -1,
                      "assoc_rhs" : -1
                    }
                  },
                  "children" : [
                    {
                      "kind" : "KeywordTerminalNode",
                      "terminal" : {
                        "kind" : "Terminal",
                        "name" : "'a'",
                        "nodeType" : "Literal",
                        "regex" : {
                          "kind" : "Char",
                          "val" : 97
                        }
                      },
                      "start" : 1,
                      "end" : 2
                    }
                  ],
                  "start" : 1,
                  "end" : 2
                }
              ],
              "start" : 1,
              "end" : 2
            }
          ],
          "start" : 0,
          "end" : 2
        }
      ],
      "start" : 0,
      "end" : 2
    }
  ],
  "start" : 0,
  "end" : 2
}