{
  "rules" : [
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "S"
      },
      "priorityLevels" : [
        {
          "alternatives" : [
            {
              "seqs" : [
                {
                  "symbols" : [
                    {
                      "kind" : "Code",
                      "name" : "E {assert(x == 1,y == 2)}",
                      "symbol" : {
                        "kind" : "Identifier",
                        "name" : "E"
                      },
                      "statements" : [
                        {
                          "kind" : "ExpressionStatement",
                          "exp" : {
                            "kind" : "Assert",
                            "arguments" : [
                              {
                                "kind" : "Equal",
                                "lhs" : {
                                  "kind" : "Name",
                                  "name" : "x",
                                  "i" : -1
                                },
                                "rhs" : {
                                  "kind" : "Integer",
                                  "value" : 1
                                }
                              },
                              {
                                "kind" : "Equal",
                                "lhs" : {
                                  "kind" : "Name",
                                  "name" : "y",
                                  "i" : -1
                                },
                                "rhs" : {
                                  "kind" : "Integer",
                                  "value" : 2
                                }
                              }
                            ],
                            "fun" : "assert"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "E"
      },
      "priorityLevels" : [
        {
          "alternatives" : [
            {
              "seqs" : [
                {
                  "symbols" : [
                    {
                      "kind" : "Terminal",
                      "name" : "-",
                      "nodeType" : "Literal",
                      "regex" : {
                        "kind" : "Char",
                        "val" : 45
                      }
                    },
                    {
                      "kind" : "Identifier",
                      "name" : "E",
                      "excepts" : [
                        "plus"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "seqs" : [
                {
                  "symbols" : [
                    {
                      "kind" : "Identifier",
                      "name" : "E"
                    },
                    {
                      "kind" : "Terminal",
                      "name" : "+",
                      "nodeType" : "Literal",
                      "regex" : {
                        "kind" : "Char",
                        "val" : 43
                      }
                    },
                    {
                      "kind" : "Identifier",
                      "name" : "E"
                    }
                  ],
                  "associativity" : "LEFT",
                  "label" : "plus"
                }
              ]
            },
            {
              "seqs" : [
                {
                  "symbols" : [
                    {
                      "kind" : "Identifier",
                      "name" : "A"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "head" : {
        "kind" : "Nonterminal",
        "name" : "A"
      },
      "priorityLevels" : [
        {
          "alternatives" : [
            {
              "seqs" : [
                {
                  "symbols" : [
                    {
                      "kind" : "Code",
                      "name" : "a {x = 1;y = 2}",
                      "symbol" : {
                        "kind" : "Terminal",
                        "name" : "a",
                        "nodeType" : "Literal",
                        "regex" : {
                          "kind" : "Char",
                          "val" : 97
                        }
                      },
                      "statements" : [
                        {
                          "kind" : "ExpressionStatement",
                          "exp" : {
                            "kind" : "Assignment",
                            "id" : "x",
                            "exp" : {
                              "kind" : "Integer",
                              "value" : 1
                            },
                            "i" : -1
                          }
                        },
                        {
                          "kind" : "ExpressionStatement",
                          "exp" : {
                            "kind" : "Assignment",
                            "id" : "y",
                            "exp" : {
                              "kind" : "Integer",
                              "value" : 2
                            },
                            "i" : -1
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "literals" : {
    "-" : {
      "kind" : "Char",
      "val" : 45
    },
    "+" : {
      "kind" : "Char",
      "val" : 43
    },
    "a" : {
      "kind" : "Char",
      "val" : 97
    }
  },
  "startSymbol" : {
    "kind" : "Start",
    "name" : "Start(S)",
    "startSymbol" : "S"
  },
  "globals" : {
    "x" : {
      "kind" : "Integer",
      "value" : 0
    },
    "y" : {
      "kind" : "Integer",
      "value" : 0
    }
  }
}