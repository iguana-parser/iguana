
global env = set()

start Definition
  = (Rule | Global)+

Global
 = "global" id:Identifier "=" Expression  env=put(env,id.yield)

Rule
  = ("start" | "layout")? Name Parameters? "=" Body        %ContextFree
  | "layout"? "regex" Name "=" RegexBody                   %Regex

Parameters
  = "(" {id:Identifier env=put(env, id.yield) ","}* ")"

RegexBody
  = {RegexSequence "|"}*

Body
  = {PriorityLevels ">"}+

PriorityLevels
  = {Alternative "|"}+

Alternative
  = Sequence                                         %Sequence
  | Associativity "(" Sequence ("|" Sequence)+ ")"   %Associativity
  | Label?                                           %Empty

Sequence
  = Associativity? Condition? Symbol Symbol+ ReturnExpression? Label?   %MoreThanOneElem
  | Condition? Symbol ReturnExpression? Label?                          %SingleElem

Condition
  = "[" {Expression ","}* "]"

RegexSequence
  = Regex+

Symbol
  = Identifier Arguments                    %Call
  > "offside" Symbol                        %Offside
  > Symbol "*"                              %Star
  | Symbol "+"                              %Plus
  | Symbol "?"                              %Option
  | "(" Symbol Symbol* ")"                  %Sequence
  | "(" Symbol+ ("|" Symbol+)+ ")"          %Alternation
  > "align" Symbol                          %Align
  | "ignore" Symbol                         %Ignore
  > Identifier ":" Symbol                   %Labeled
  > Symbol!Statement Statement+             %Statement
  | Symbol Condition                        %PostCondition
  > Regex "<<" Symbol                       %Precede
  | Regex "!<<" Symbol                      %NotPrecede
  > Symbol ">>" Regex                       %Follow
  | Symbol "!>>" Regex                      %NotFollow
  | Symbol "\\" Regex                       %Exclude
  | Symbol "!" Identifier                   %Except
  | "if" Expression Symbol "else" Symbol    %IfThenElse
  | Identifier                              %Identifier
  | String                                  %String
  | "{" Symbol Symbol+ "}" "*"              %StarSep
  | "{" Symbol Symbol+ "}" "+"              %PlusSep

Arguments
  = "(" {Expression ","}* ")"

Statement
  = FunName Arguments ";"?    %Call
  | Binding ";"?              %Binding

Binding
  = VarName "=" Expression                                            %Assign
  | "var" {(id:Name env=put(env, id.yield) "=" Expression) ","}+      %Declare

Regex
  = Regex "*"                     %Star
  | Regex "+"                     %Plus
  | Regex "?"                     %Option
  | "(" Regex ")"                 %Bracket
  | "(" Regex Regex+ ")"          %Sequence
  | "(" Regexs ("|" Regexs)+ ")"  %Alternation
  | Name                          %Nont
  | CharClass                     %CharClass
  | String                        %String

Regexs
  = Regex+

CharClass
  = "[" Range* "]"      %Chars
  | "!" "[" Range* "]"  %NotChars

Range
  = RangeChar "-" RangeChar   %Range
  | RangeChar                 %Character

Expression
  =           FunName Arguments            %Call
  |           "!" Expression               %Not
  > left      (Expression "*" Expression   %Multiplication
  |            Expression "/" Expression   %Division)
  > left      (Expression "+" Expression   %Addition
  |            Expression "-" Expression   %Subtraction)
  > non-assoc (Expression ">=" Expression  %GreaterEq
  |            Expression "<=" Expression  %LessEq
  |            Expression ">" Expression   %Greater
  |            Expression "<" Expression   %Less)
  > non-assoc (Expression "==" Expression  %Equal
  |            Expression "!=" Expression  %NotEqual)
  > left      (Expression "&&" Expression  %And
  |            Expression "||" Expression  %Or)
  |           Identifier ".l"              %LExtent
  |           Identifier ".r"              %RExtent
  |           Identifier ".yield"          %Yield
  |           Identifier ".val"            %Val
  |           VarName                      %Name
  |           Number                       %Number
  |           "(" Expression ")"           %Bracket

ReturnExpression
  = "{" Expression "}"

VarName
  = id:Identifier   [contains(env,id.yield)]

Label
  = '%' Identifier

Name
  = id:Identifier   [!contains(env,id.yield)]

Identifier
  = [A-Z_a-z] !<< LetterOrDigits \ Keywords

regex LetterOrDigits
  = Letter (Letter | LetterOrDigit)*

regex LetterOrDigit
  = [A-Za-z_0-9]

regex Letter
  = [A-Za-z_]

regex Number
  = [0]
  | [1-9][0-9]*

regex Character
  = "\\" [' " \\ t f r n]
  | ![' " \\]

regex RangeChar
  = "\\" [\\ \[ \] \- t f r n \ ]
  | ![\\ \[ \] \- \t \f \r \n \ ]

regex String
  = "\"" Character* "\""
  | "\'" Character* "\'"

layout regex Layout
  = WhiteSpaceOrComment*

regex WhiteSpaceOrComment
  = WhiteSpace
  | Comment

regex WhiteSpace
  = [\ \t \f \r \n]+

regex Comment
  = SingleLineComment
  | MultiLineComment

regex SingleLineComment
  = "//" ![\r \n]* [\r\n]

regex MultiLineComment
  = "/*" CommentChar* [*]+  "/"

regex CommentChar
  = [/]
  | [*]* ![/ *]

regex Associativity
  = "left"
  | "right"
  | "non-assoc"

regex Keywords
  = "start"
  | "regex"
  | "layout"
  | "var"
  | "left"
  | "right"
  | "non-assoc"
  | "align"
  | "offside"
  | "ignore"
  | "println"
  | "indent"
  | "if"
  | "else"
  | "assert"
  | "set"
  | "contains"
  | "put"

regex FunName
  = "println"
  | "indent"
  | "assert"
  | "set"
  | "contains"
  | "put"
