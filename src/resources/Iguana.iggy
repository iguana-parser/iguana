grammar Iggy

var env = set()

start Grammar
  = "grammar"? name:Identifier? defs:(Rule | TopLevelVar)+

TopLevelVar
 = "global"? "var" id:Identifier "=" exp:Expression env=put(env,id.yield)

Rule
  = modifier: ("start" | "layout" | "lexical")? name:Name params:Parameters? "=" body:Body    %ContextFree
  | modifier: "layout"? "regex" name:Name "=" body:RegexBody                                  %Regex

Parameters
  = "(" {id:Identifier env=put(env, id.yield) ","}* ")"

RegexBody
  = { Regex+ "|" }*

Body
  = {PriorityLevels ">"}+

PriorityLevels
  = {Alternative "|"}+

Alternative
  = seq:Sequence                                        %Sequence
  | assoc:Associativity "(" seqs: {Sequence "|"}+ ")"   %Associativity

Sequence
  = assoc:Associativity? cond:Condition? first:Symbol rest:Symbol+ ret:ReturnExpression? label:Label?   %MoreThanOneElem
  | cond:Condition? sym:Symbol ret:ReturnExpression? label:Label?                                       %SingleElem
  | label:Label?                                                                                        %Empty

Condition
  = "{" {Expression ","}* "}" "?"

Symbol
  = id:Identifier args:Arguments                                 %Call
  > "offside" sym:Symbol                                         %Offside
  > sym:Symbol "*"                                               %Star
  | sym:Symbol "+"                                               %Plus
  | sym:Symbol "?"                                               %Option
  | "(" syms:Symbol+ ")"                                         %Sequence
  | "(" first:Symbol+ rest:("|" Symbol+)+ ")"                    %Alternation
  > "align" sym:Symbol                                           %Align
  | "ignore" sym:Symbol                                          %Ignore
  > id:Identifier ":" sym:Symbol                                 %Labeled
  > sym:Symbol !Statement stmts:Statement+                       %Statement
  | sym:Symbol cond:Condition                                    %PostCondition
  > reg:Regex "<<" sym:Symbol                                    %Precede
  | reg:Regex "!<<" sym:Symbol                                   %NotPrecede
  | "^" sym:Symbol                                               %StartOfLine
  > sym:Symbol ">>" reg:Regex                                    %Follow
  | sym:Symbol "!>>" reg:Regex                                   %NotFollow
  | sym:Symbol "\\" reg:Regex                                    %Exclude
  | sym:Symbol "!" id:Identifier                                 %Except
  | sym:Symbol "$"                                               %EndOfLine
  | sym:Symbol "$$"                                              %EndOfFile
  | "if" exp:Expression thenPart:Symbol "else" elsePart:Symbol   %IfThenElse
  | id:Identifier                                                %Identifier
  | string:String                                                %String
  | charClass:CharClass                                          %CharClass
  | "{" sym:Symbol sep:Symbol+ "}" "*"                           %StarSep
  | "{" sym:Symbol sep:Symbol+ "}" "+"                           %PlusSep

Arguments
  = "(" {Expression ","}* ")"

Statement
  = fun:FunName args:Arguments ";"?    %Call
  | bindings:Binding ";"?              %Binding

Binding
  = varName:VarName "=" exp:Expression                                      %Assign
  | "var" decls:{(id:Name env=put(env, id.yield) "=" Expression) ","}+      %Declare

Regex
  = reg:Regex "*"                                       %Star
  | reg:Regex "+"                                       %Plus
  | reg:Regex "?"                                       %Option
  | "(" reg:Regex ")"                                   %Bracket
  | "(" first:Regex rest:Regex+ ")"                     %Sequence
  | "(" first:Regex+ "|" rest:{ Regex+ "|" }+ ")"       %Alternation
  | name:Name                                           %Nont
  | charClass:CharClass                                 %CharClass
  | string:String                                       %String

CharClass
  = "[" ranges:Range* "]"      %Chars
  | "!" "[" ranges:Range* "]"  %NotChars

Range
  = first:RangeChar "-" second:RangeChar   %Range
  | range:RangeChar                        %Character

Expression
  =           fun:FunName args:Arguments            %Call
  |           "!" exp:Expression                    %Not
  > left      (lhs:Expression "*" rhs:Expression    %Multiplication
  |            lhs:Expression "/" rhs:Expression    %Division)
  > left      (lhs:Expression "+" rhs:Expression    %Addition
  |            lhs:Expression "-" rhs:Expression    %Subtraction)
  > non-assoc (lhs:Expression ">=" rhs:Expression   %GreaterEq
  |            lhs:Expression "<=" rhs:Expression   %LessEq
  |            lhs:Expression ">" rhs:Expression    %Greater
  |            lhs:Expression "<" rhs:Expression    %Less)
  > non-assoc (lhs:Expression "==" rhs:Expression   %Equal
  |            lhs:Expression "!=" rhs:Expression   %NotEqual)
  > left      (lhs:Expression "&&" rhs:Expression   %And
  |            lhs:Expression "||" rhs:Expression   %Or)
  |           id:Identifier ".l"                    %LExtent
  |           id:Identifier ".r"                    %RExtent
  |           id:Identifier ".yield"                %Yield
  |           id:Identifier ".val"                  %Val
  |           varName:VarName                       %Name
  |           number:Number                         %Number
  |           "(" exp:Expression ")"                %Bracket

ReturnExpression
  = "{" exp:Expression "}"

VarName
  = id:Identifier {contains(env,id.yield)}?

Name
  = id:Identifier {!contains(env,id.yield)}?

FunName
  = "println"       %Println
  | "indent"        %Indent
  | "assert"        %Assert
  | "set"           %Set
  | "contains"      %Contains
  | "put"           %Put

Identifier
  = [A-Z_a-z] !<< LetterOrDigits \ Keywords

lexical Label
  = '%' id:Identifier

layout Layout
  = (WhiteSpace | SingleLineComment | MultiLineComment)* !>> WhiteSpace !>> "//" !>> "/*"

regex LetterOrDigits
  = Letter (Letter | LetterOrDigit)*

regex LetterOrDigit
  = [A-Za-z_0-9]

regex Letter
  = [A-Za-z_]

regex Number
  = [0]
  | [1-9][0-9]*

regex Character
  = "\\" [' " \\ t f r n]
  | ![' " \\]

regex String
  = "\"" Character* "\""
  | "\'" Character* "\'"

regex WhiteSpace
  = [\ \t \f \r \n]+

regex SingleLineComment
  = "//" ![\r \n]* [\r\n]

regex MultiLineComment
  = "/*" CommentChar* [*]+  "/"

regex CommentChar
  = [/]
  | [*]* ![/ *]

regex Associativity
  = "left"
  | "right"
  | "non-assoc"

regex RangeChar
  = "\\" [\\ \[ \] \- t f r n \ ]
  | ![\\ \[ \] \- \t \f \r \n \ ]

regex Keywords
  = "start"
  | "regex"
  | "layout"
  | "var"
  | "left"
  | "right"
  | "non-assoc"
  | "align"
  | "offside"
  | "ignore"
  | "println"
  | "indent"
  | "if"
  | "else"
  | "assert"
  | "set"
  | "contains"
  | "put"
  | "lexical"
  | "grammar"
  | "global"
